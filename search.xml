<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>R语言中有关于概率分布的函数</title>
    <url>//posts/6/</url>
    <content><![CDATA[<p>在R语言中，提供非常全面的统计函数。其中包括概率分布的分布函数（CDF the cumulative distribution function ）、概率密度函数（ the probability density function）、以及<strong>下分位点</strong>函数（the quantile function）。</p>
<a id="more"></a>
<h2 id="相关的概率分布"><a href="#相关的概率分布" class="headerlink" title="相关的概率分布"></a>相关的概率分布</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Distribution</th>
<th style="text-align:center">R name</th>
<th style="text-align:center">additional arguments</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">beta</td>
<td style="text-align:center">beta</td>
<td style="text-align:center">shape1, shape2, ncp</td>
</tr>
<tr>
<td style="text-align:center">binomial</td>
<td style="text-align:center">binom</td>
<td style="text-align:center">size, prob</td>
</tr>
<tr>
<td style="text-align:center">Cauchy</td>
<td style="text-align:center">cauchy</td>
<td style="text-align:center">location, scale</td>
</tr>
<tr>
<td style="text-align:center">chi-squared</td>
<td style="text-align:center">chisq</td>
<td style="text-align:center">df, ncp</td>
</tr>
<tr>
<td style="text-align:center">exponential</td>
<td style="text-align:center">exp</td>
<td style="text-align:center">rate</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">f</td>
<td style="text-align:center">df1, df2, ncp</td>
</tr>
<tr>
<td style="text-align:center">gamma</td>
<td style="text-align:center">gamma</td>
<td style="text-align:center">shape, scale</td>
</tr>
<tr>
<td style="text-align:center">geometric</td>
<td style="text-align:center">geom</td>
<td style="text-align:center">prob</td>
</tr>
<tr>
<td style="text-align:center">hypergeometric</td>
<td style="text-align:center">hyper</td>
<td style="text-align:center">m, n, k</td>
</tr>
<tr>
<td style="text-align:center">log-normal</td>
<td style="text-align:center">lnorm</td>
<td style="text-align:center">meanlog, sdlog</td>
</tr>
<tr>
<td style="text-align:center">logistic</td>
<td style="text-align:center">logis</td>
<td style="text-align:center">location, scale</td>
</tr>
<tr>
<td style="text-align:center">negative binomial</td>
<td style="text-align:center">nbinom</td>
<td style="text-align:center">size, prob</td>
</tr>
<tr>
<td style="text-align:center">normal</td>
<td style="text-align:center">norm</td>
<td style="text-align:center">mean, sd</td>
</tr>
<tr>
<td style="text-align:center">Poisson</td>
<td style="text-align:center">pois</td>
<td style="text-align:center">lambda</td>
</tr>
<tr>
<td style="text-align:center">signed rank</td>
<td style="text-align:center">signrank</td>
<td style="text-align:center">n</td>
</tr>
<tr>
<td style="text-align:center">Student`s t</td>
<td style="text-align:center">t</td>
<td style="text-align:center">df, ncp</td>
</tr>
<tr>
<td style="text-align:center">uniform</td>
<td style="text-align:center">unif</td>
<td style="text-align:center">min, max</td>
</tr>
<tr>
<td style="text-align:center">Weibull</td>
<td style="text-align:center">weibull</td>
<td style="text-align:center">shape, scale</td>
</tr>
<tr>
<td style="text-align:center">Wilcoxon</td>
<td style="text-align:center">wilcox</td>
<td style="text-align:center">m, n</td>
</tr>
</tbody>
</table>
</div>
<h2 id="概率密度的相关计算"><a href="#概率密度的相关计算" class="headerlink" title="概率密度的相关计算"></a>概率密度的相关计算</h2><p>在上面的 <code>R name</code> 前面加上 <code>d</code> 表示对应的概率密度函数，加上 <code>p</code>表示对应分布的分布函数，加上 <code>q</code> 表示对应的分位数函数，前面加上<code>r</code> 表示产生对应分布的随机数。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">dnorm(x,</span> <span class="string">mean</span> <span class="string">=</span> <span class="number">0</span><span class="string">,</span> <span class="string">sd</span> <span class="string">=</span> <span class="number">1</span><span class="string">,</span> <span class="string">log</span> <span class="string">=</span> <span class="literal">FALSE</span><span class="string">)</span></span><br><span class="line"><span class="string">pnorm(q,</span> <span class="string">mean</span> <span class="string">=</span> <span class="number">0</span><span class="string">,</span> <span class="string">sd</span> <span class="string">=</span> <span class="number">1</span><span class="string">,</span> <span class="string">lower.tail</span> <span class="string">=</span> <span class="literal">TRUE</span><span class="string">,</span> <span class="string">log.p</span> <span class="string">=</span> <span class="literal">FALSE</span><span class="string">)</span></span><br><span class="line"><span class="string">qnorm(p,</span> <span class="string">mean</span> <span class="string">=</span> <span class="number">0</span><span class="string">,</span> <span class="string">sd</span> <span class="string">=</span> <span class="number">1</span><span class="string">,</span> <span class="string">lower.tail</span> <span class="string">=</span> <span class="literal">TRUE</span><span class="string">,</span> <span class="string">log.p</span> <span class="string">=</span> <span class="literal">FALSE</span><span class="string">)</span></span><br><span class="line"><span class="string">rnorm(n,</span> <span class="string">mean</span> <span class="string">=</span> <span class="number">0</span><span class="string">,</span> <span class="string">sd</span> <span class="string">=</span> <span class="number">1</span><span class="string">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#特殊的参数：</span></span><br><span class="line"><span class="string">log,</span> <span class="string">log.p：logical;</span> <span class="string">if</span> <span class="literal">TRUE</span><span class="string">,</span> <span class="string">probabilities</span> <span class="string">p</span> <span class="string">are</span> <span class="string">given</span> <span class="string">as</span> <span class="string">log(p).</span></span><br><span class="line"><span class="string">lower.tail：logical;</span> <span class="string">if</span> <span class="literal">TRUE</span> <span class="string">(default),</span> <span class="string">probabilities</span> <span class="string">are</span> <span class="string">P[X</span> <span class="string">≤</span> <span class="string">x]</span> <span class="string">otherwise,</span> <span class="string">P[X</span> <span class="string">&gt;</span> <span class="string">x].</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>例如对于正态分布：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt; dnorm(<span class="number">2</span>,mean=<span class="number">0</span>,sd = <span class="number">1</span>) </span><br><span class="line"><span class="string">[1]</span> <span class="number">0.05399097</span></span><br><span class="line">&gt; pnorm(<span class="number">2</span>,mean = <span class="number">0</span>,sd = <span class="number">1</span>)</span><br><span class="line"><span class="string">[1]</span> <span class="number">0.9772499</span></span><br><span class="line">&gt; qnorm(<span class="number">0.03</span>,mean = <span class="number">0</span>,sd = <span class="number">1</span>)</span><br><span class="line"><span class="string">[1]</span> <span class="number">-1.880794</span></span><br><span class="line">&gt; rnorm(<span class="number">10</span>,mean = <span class="number">0</span>,sd = <span class="number">1</span>)</span><br><span class="line"><span class="string"> [1]</span>  <span class="number">1.1642331</span>  <span class="number">0.5681395</span> <span class="number">-1.1315078</span>  <span class="number">0.6672826</span></span><br><span class="line"><span class="string"> [5]</span>  <span class="number">0.7476347</span> <span class="number">-1.6436189</span> <span class="number">-0.3249231</span>  <span class="number">0.1818301</span></span><br><span class="line"><span class="string"> [9]</span>  <span class="number">1.0729797</span> <span class="number">-0.4267270</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p><code>dnorm</code> 函数给出了标准正态分布的概率密度函数在2处的取值；<br><code>pnorm</code> 函数给出了标准正态分布在2处的分布函数值；<br><code>qnorm</code> 给出了概率为0.03的<strong>下分位点</strong>。<br><code>rnorm</code> 产生了一个包含10个数的标准正态分布的序列。</p>
<div class="note warning"><p>在 <code>pxxx</code> 与 <code>qxxx</code> 中存在一个两个特殊的参数：<code>lower.tail</code> 与 <code>log.p</code>。第一个参数是改变求相应的值的方向，第二个值是将求出来的值取对数。</p>
</div>
<p>例如对于上面的例子：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; pnorm(<span class="number">2</span>,mean = <span class="number">0</span>,sd = <span class="number">1</span>,lower.tail = F)</span><br><span class="line"><span class="string">[1]</span> <span class="number">0.02275013</span></span><br><span class="line">&gt; qnorm(<span class="number">0.03</span>,mean = <span class="number">0</span>,sd = <span class="number">1</span>,lower.tail = F)</span><br><span class="line"><span class="string">[1]</span> <span class="number">1.880794</span></span><br><span class="line">&gt; pnorm(<span class="number">2</span>,mean = <span class="number">0</span>,sd = <span class="number">1</span>,lower.tail = F,log.p = T)</span><br><span class="line"><span class="string">[1]</span> <span class="number">-3.783184</span></span><br><span class="line">&gt; qnorm(<span class="number">-3.783184</span>,mean = <span class="number">0</span>,sd = <span class="number">1</span>,lower.tail = F,log.p = T)</span><br><span class="line"><span class="string">[1]</span> <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在第一个结果中，给出的值是 <code>1-CDF</code>, 第二个值是对应的上分位点，第三个值将第一个值以对数的形式给出。第四个在参数 <code>q</code>处给出的是对应概率的对数值，而不是概率值。</p>
<h2 id="概率分布的绘图"><a href="#概率分布的绘图" class="headerlink" title="概率分布的绘图"></a>概率分布的绘图</h2><p>给我们一组数据、我们可以通过多种方式检验他的分布，其中一种方式就是绘制这组数据所对应的图形。</p>
<h3 id="茎叶图"><a href="#茎叶图" class="headerlink" title="茎叶图"></a>茎叶图</h3><p>我们使用R语言自带的数据集 <code>faithful</code> :</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; head(faithful)</span><br><span class="line">  eruptions waiting</span><br><span class="line"><span class="number">1</span>     <span class="number">3.600</span>      <span class="number">79</span></span><br><span class="line"><span class="number">2</span>     <span class="number">1.800</span>      <span class="number">54</span></span><br><span class="line"><span class="number">3</span>     <span class="number">3.333</span>      <span class="number">74</span></span><br><span class="line"><span class="number">4</span>     <span class="number">2.283</span>      <span class="number">62</span></span><br><span class="line"><span class="number">5</span>     <span class="number">4.533</span>      <span class="number">85</span></span><br><span class="line"><span class="number">6</span>     <span class="number">2.883</span>      <span class="number">55</span></span><br></pre></td></tr></table></figure>
<p>这个数据集中包含两个变量 <code>eruptions</code> , <code>waiting</code>，我们来试探第一个变量的分布，通过绘制对应的茎叶图：<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; attach(faithful)</span><br><span class="line">&gt; stem(eruptions)</span><br><span class="line"></span><br><span class="line">  The decimal point <span class="keyword">is</span> <span class="number">1</span> digit(s) to the left of the |</span><br><span class="line"></span><br><span class="line">  <span class="number">16</span> | <span class="number">070355555588</span></span><br><span class="line">  <span class="number">18</span> | <span class="number">000022233333335577777777888822335777888</span></span><br><span class="line">  <span class="number">20</span> | <span class="number">00002223378800035778</span></span><br><span class="line">  <span class="number">22</span> | <span class="number">0002335578023578</span></span><br><span class="line">  <span class="number">24</span> | <span class="number">00228</span></span><br><span class="line">  <span class="number">26</span> | <span class="number">23</span></span><br><span class="line">  <span class="number">28</span> | <span class="number">080</span></span><br><span class="line">  <span class="number">30</span> | <span class="number">7</span></span><br><span class="line">  <span class="number">32</span> | <span class="number">2337</span></span><br><span class="line">  <span class="number">34</span> | <span class="number">250077</span></span><br><span class="line">  <span class="number">36</span> | <span class="number">0000823577</span></span><br><span class="line">  <span class="number">38</span> | <span class="number">2333335582225577</span></span><br><span class="line">  <span class="number">40</span> | <span class="number">0000003357788888002233555577778</span></span><br><span class="line">  <span class="number">42</span> | <span class="number">03335555778800233333555577778</span></span><br><span class="line">  <span class="number">44</span> | <span class="number">02222335557780000000023333357778888</span></span><br><span class="line">  <span class="number">46</span> | <span class="number">0000233357700000023578</span></span><br><span class="line">  <span class="number">48</span> | <span class="number">00000022335800333</span></span><br><span class="line">  <span class="number">50</span> | <span class="number">0370</span></span><br></pre></td></tr></table></figure>
<p>通过上面的茎叶图我们可以大致的可以看出数据的分布，数据向两端集中。</p>
<h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><p>在R语言中可以通过自带的函数 <code>hist</code> 绘制直方图。<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">hist(x,</span> <span class="string">breaks</span> <span class="string">=</span> <span class="string">&quot;Sturges&quot;</span><span class="string">,</span></span><br><span class="line">     <span class="string">freq</span> <span class="string">=</span> <span class="literal">NULL</span><span class="string">,</span> <span class="string">probability</span> <span class="string">=</span> <span class="type">!freq,</span></span><br><span class="line">     <span class="string">include.lowest</span> <span class="string">=</span> <span class="literal">TRUE</span><span class="string">,</span> <span class="string">right</span> <span class="string">=</span> <span class="literal">TRUE</span><span class="string">,</span></span><br><span class="line">     <span class="string">density</span> <span class="string">=</span> <span class="literal">NULL</span><span class="string">,</span> <span class="string">angle</span> <span class="string">=</span> <span class="number">45</span><span class="string">,</span> <span class="string">col</span> <span class="string">=</span> <span class="string">&quot;lightgray&quot;</span><span class="string">,</span> <span class="string">border</span> <span class="string">=</span> <span class="literal">NULL</span><span class="string">,</span></span><br><span class="line">     <span class="string">main</span> <span class="string">=</span> <span class="string">paste(&quot;Histogram</span> <span class="string">of&quot;</span> <span class="string">,</span> <span class="string">xname),</span></span><br><span class="line">     <span class="string">xlim</span> <span class="string">=</span> <span class="string">range(breaks),</span> <span class="string">ylim</span> <span class="string">=</span> <span class="literal">NULL</span><span class="string">,</span></span><br><span class="line">     <span class="string">xlab</span> <span class="string">=</span> <span class="string">xname,</span> <span class="string">ylab,</span></span><br><span class="line">     <span class="string">axes</span> <span class="string">=</span> <span class="literal">TRUE</span><span class="string">,</span> <span class="string">plot</span> <span class="string">=</span> <span class="literal">TRUE</span><span class="string">,</span> <span class="string">labels</span> <span class="string">=</span> <span class="literal">FALSE</span><span class="string">,</span></span><br><span class="line">     <span class="string">nclass</span> <span class="string">=</span> <span class="literal">NULL</span><span class="string">,</span> <span class="string">warn.unused</span> <span class="string">=</span> <span class="literal">TRUE</span><span class="string">,</span> <span class="string">...)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>```</p>
<blockquote>
<p>summary(eruptions)<br>   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.<br>  1.600   2.163   4.000   3.488   4.454   5.100 </p>
</blockquote>
]]></content>
      <categories>
        <category>R语言</category>
        <category>统计应用</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>R语言中的条件与循环结构</title>
    <url>//posts/3/</url>
    <content><![CDATA[<p>编程语言的执行顺序一般都是从上到下依次执行，但是在日常使用的过程中我们要可能需要一些其他的语句执行顺序，如循环结构与条件结构。</p>
<a id="more"></a>
<h2 id="R语言里面的循环结构"><a href="#R语言里面的循环结构" class="headerlink" title="R语言里面的循环结构"></a>R语言里面的循环结构</h2><h3 id="1、for循环"><a href="#1、for循环" class="headerlink" title="1、for循环"></a>1、for循环</h3><p>for 可以重复执行语句，而且重复的次数是可以直接控制的。</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (variable <span class="keyword">in</span> <span class="built_in">vector</span>) &#123;</span><br><span class="line">  <span class="built_in">content</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable:为循环的参数</span><br><span class="line"><span class="built_in">vector</span>：为循环参数的取值</span><br><span class="line">在<span class="built_in">content</span>：输入要循环的语句</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>例如通过下面的语句输出斐波拉契数列的前三十个值</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">fseq &lt;- c(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">28</span>) &#123;</span><br><span class="line">  fseq[i+<span class="number">2</span>]=fseq[i]+fseq[i+<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">fseq</span><br></pre></td></tr></table></figure>
<h3 id="2、while循环"><a href="#2、while循环" class="headerlink" title="2、while循环"></a>2、while循环</h3><p>while 循环当给定条件为 TRUE 时就会一直循环直到判断条件为 FALSE，这种循环需要知道循环的条件。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">while</span><span class="params">(condition)</span></span>&#123;</span><br><span class="line">  如果条件满足则执行的语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如通过while循环来输出斐波拉契数列前三十个</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">fseq &lt;- c(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">28</span>)&#123;</span><br><span class="line">  fseq[i+<span class="number">2</span>] = fseq[i]+fseq[i+<span class="number">1</span>] </span><br><span class="line">  i=i+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fseq</span><br></pre></td></tr></table></figure>
<h3 id="3、repeat循环"><a href="#3、repeat循环" class="headerlink" title="3、repeat循环"></a>3、repeat循环</h3><p>repeat 循环会一直的执行语句，直到 break 之后循环停止。因此 repeat 循环经常与 break 语句连用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">repeat&#123;</span><br><span class="line">  content</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">condition</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的语句中一直执行 content 中的代码，直到满足条件 break。例如通过 repeat 循环去输出斐波拉契数列的前三十项</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">i=<span class="number">1</span></span><br><span class="line">fseq &lt;- c(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">repeat&#123;</span><br><span class="line">     fseq[i+<span class="number">2</span>] = fseq[i+<span class="number">1</span>]+fseq[i]</span><br><span class="line">     i=i+<span class="number">1</span></span><br><span class="line">     <span class="keyword">if</span>(i == <span class="number">29</span>)&#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h3 id="4、循环控制语句"><a href="#4、循环控制语句" class="headerlink" title="4、循环控制语句"></a>4、循环控制语句</h3><p><strong>break语句</strong></p>
<p>break 语句用于循环体中，作用是直接退出当前的循环体，执行循环下面的语句<strong>或者是执行外层的循环</strong>。例如上面的例子中，当 i 的取值等于29时，就停止 repeat 的循环。</p>
<p><strong>next语句</strong></p>
<p>这个语句和 break 语句有一些区别，它是跳过某次循环，执行下次循环，整个循环体还是在继续执行。例如一个字符串 <code>c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)</code> 。用循环语句依次输出每一个元素，但是跳过 b。</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">A = c(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>)</span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">(i in <span class="number">1</span>:<span class="number">3</span>)</span>&#123;</span></span><br><span class="line"><span class="function">  <span class="title">if</span><span class="params">(A[i] == <span class="string">&quot;b&quot;</span>)</span> <span class="title">next</span></span></span><br><span class="line"><span class="function">  <span class="title">print</span><span class="params">(A[i])</span> </span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="R语言里面的条件结构"><a href="#R语言里面的条件结构" class="headerlink" title="R语言里面的条件结构"></a>R语言里面的条件结构</h2><h3 id="1、if条件结构"><a href="#1、if条件结构" class="headerlink" title="1、if条件结构"></a>1、if条件结构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>(<span class="params">expression</span>)</span>&#123;</span><br><span class="line">  若expression为<span class="literal">true</span>则执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如下面的例子，判断数是否大于5</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">x</span> &lt;- <span class="number">6</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="variable">x</span>&gt;<span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="function">  <span class="title">print</span>(<span class="string">&quot;x is greater than 5&quot;</span>)</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、if-else-条件结构"><a href="#2、if-else-条件结构" class="headerlink" title="2、if-else 条件结构"></a>2、if-else 条件结构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>(<span class="params">expression</span>)</span>&#123;</span><br><span class="line">  若expression为<span class="literal">true</span>则执行</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  若expression为<span class="literal">false</span>则执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如同样的例子：</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">x</span> &lt;-<span class="number">4</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="variable">x</span>&gt;<span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="function">  <span class="title">print</span>(<span class="string">&quot;x is greater than 5&quot;</span>)</span></span><br><span class="line">&#125; <span class="variable"><span class="keyword">else</span></span> &#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="string">&quot;x is not greater than 5&quot;</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的结构中会先去判断 if 后面的条件，如果不满足则执行 else 语句后面的代码。</p>
]]></content>
      <categories>
        <category>R语言</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>R语言</tag>
      </tags>
  </entry>
  <entry>
    <title>R语言数据创建与导入</title>
    <url>//posts/1/</url>
    <content><![CDATA[<p><img data-src="http://ww1.sinaimg.cn/large/007DtFxUly1gkangqreppj307305i3ye.jpg" width="20%" height="20%" title=" " alt=""/></p>
<a id="more"></a>
<h2 id="创建数据集"><a href="#创建数据集" class="headerlink" title="创建数据集"></a>创建数据集</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><strong>向量：</strong></p>
<p>存储同一类型的数据，可以是<strong>数值型</strong>、<strong>字符串型</strong>、也可以是<strong>布尔型</strong>的。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a &lt;- <span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">b &lt;- <span class="built_in">c</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>)</span><br><span class="line"><span class="built_in">c</span> &lt;- <span class="built_in">c</span>(<span class="literal">FALSE</span>,<span class="literal">FALSE</span>,<span class="literal">TRUE</span>,<span class="literal">TRUE</span>,<span class="literal">FALSE</span>)</span><br><span class="line"></span><br><span class="line">------ 向量的创建</span><br><span class="line"></span><br><span class="line">&gt; a[<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span></span><br><span class="line">&gt; a[<span class="number">2</span>:<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span> <span class="number">3</span></span><br><span class="line">&gt; a[<span class="built_in">c</span>(<span class="built_in">T</span>,<span class="built_in">T</span>,<span class="built_in">F</span>,<span class="built_in">F</span>,<span class="built_in">F</span>)]</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">------ 向量数据的提取</span><br></pre></td></tr></table></figure>
<p>在R语言种存在标量一词，标量其实就是只是包含一个元素的向量，如 <code>a &lt; - 2</code> 这时 <code>a</code> 是一个标量。</p>
<p><strong>矩阵：</strong></p>
<p>矩阵是一个二维数组，且必须存同一个数据类型数值型或者是字符串型等。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mymatrix &lt;- matrix(vector,nrow,ncol,byrow=<span class="literal">FALSE</span>,dimnames=<span class="built_in">list</span>(Char_vector_rownames,Char_vector_colnames)</span><br><span class="line"></span><br><span class="line">vector:数据向量</span><br><span class="line">nrow ：行数</span><br><span class="line">ncol ：列数</span><br><span class="line">byrow ：在矩阵默认是按照列对数据进行填充的。</span><br><span class="line">dimnames ：对矩阵修改行列名</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">a &lt;- matrix(<span class="number">1</span>:<span class="number">20</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">a</span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">5</span>    <span class="number">9</span>   <span class="number">13</span>   <span class="number">17</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">6</span>   <span class="number">10</span>   <span class="number">14</span>   <span class="number">18</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">3</span>    <span class="number">7</span>   <span class="number">11</span>   <span class="number">15</span>   <span class="number">19</span></span><br><span class="line">[<span class="number">4</span>,]    <span class="number">4</span>    <span class="number">8</span>   <span class="number">12</span>   <span class="number">16</span>   <span class="number">20</span></span><br><span class="line"></span><br><span class="line">----- 创建矩阵默认按列对数据进行填充。</span><br><span class="line"></span><br><span class="line">b &lt;- matrix(<span class="number">1</span>:<span class="number">20</span>,<span class="number">4</span>,<span class="number">5</span>,byrow=<span class="built_in">T</span>)</span><br><span class="line">b</span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">6</span>    <span class="number">7</span>    <span class="number">8</span>    <span class="number">9</span>   <span class="number">10</span></span><br><span class="line">[<span class="number">3</span>,]   <span class="number">11</span>   <span class="number">12</span>   <span class="number">13</span>   <span class="number">14</span>   <span class="number">15</span></span><br><span class="line">[<span class="number">4</span>,]   <span class="number">16</span>   <span class="number">17</span>   <span class="number">18</span>   <span class="number">19</span>   <span class="number">20</span></span><br><span class="line"></span><br><span class="line">----- 创建按照列进行填行进行填充的数据。</span><br><span class="line"></span><br><span class="line">a &lt;- <span class="built_in">c</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>)</span><br><span class="line">b &lt;- <span class="built_in">c</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>)</span><br><span class="line"><span class="built_in">c</span> &lt;- matrix(<span class="number">1</span>:<span class="number">20</span>,<span class="number">5</span>,<span class="number">4</span>,byrow=<span class="built_in">T</span>,dimnames=<span class="built_in">list</span>(a,b))</span><br><span class="line"><span class="built_in">c</span></span><br><span class="line">   a  b  <span class="built_in">c</span>  d</span><br><span class="line">a  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">b  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line"><span class="built_in">c</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span></span><br><span class="line">d <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span></span><br><span class="line">e <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">----- 通过dimnames参数对矩阵的行与列命名。</span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">c</span>[<span class="number">1</span>:<span class="number">8</span>]</span><br><span class="line">[<span class="number">1</span>]  <span class="number">1</span>  <span class="number">5</span>  <span class="number">9</span> <span class="number">13</span> <span class="number">17</span>  <span class="number">2</span>  <span class="number">6</span> <span class="number">10</span></span><br><span class="line">&gt; <span class="built_in">c</span>[<span class="number">1</span>,]</span><br><span class="line">a b <span class="built_in">c</span> d </span><br><span class="line">1 <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line">&gt; <span class="built_in">c</span>[,<span class="number">1</span>]</span><br><span class="line"> a  b  <span class="built_in">c</span>  d  e </span><br><span class="line"> <span class="number">1</span>  <span class="number">5</span>  <span class="number">9</span> <span class="number">13</span> <span class="number">17</span></span><br><span class="line"></span><br><span class="line">矩阵数据的提取。同样默认是按照列进行数据提取的。</span><br></pre></td></tr></table></figure>
<p><strong>数组：</strong></p>
<p>数组是一个多维的数据矩阵，维度可以大于二，存储同一数据类型。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">myarray &lt;- array(vector,dimensions,dimnames)</span><br><span class="line"></span><br><span class="line">vector : 数据向量</span><br><span class="line">dimensions : 数组的维度</span><br><span class="line">dimnames : 为各个维度命名，必须为字符串类型。</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">dim1 &lt;- <span class="built_in">c</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">dim2 &lt;- <span class="built_in">c</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">dim3 &lt;- <span class="built_in">c</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line">myarray &lt;- array(<span class="number">1</span>:<span class="number">24</span>,<span class="built_in">c</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),dimnames = <span class="built_in">list</span>(dim1,dim2,dim3))</span><br><span class="line">myarray</span><br><span class="line"></span><br><span class="line">, , <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">1 <span class="number">1</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line">2 <span class="number">2</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line">, , <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">1 <span class="number">7</span>  <span class="number">9</span> <span class="number">11</span></span><br><span class="line">2 <span class="number">8</span> <span class="number">10</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line">, , <span class="number">3</span></span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">1 <span class="number">13</span> <span class="number">15</span> <span class="number">17</span></span><br><span class="line">2 <span class="number">14</span> <span class="number">16</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line">, , <span class="number">4</span></span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">1 <span class="number">19</span> <span class="number">21</span> <span class="number">23</span></span><br><span class="line">2 <span class="number">20</span> <span class="number">22</span> <span class="number">24</span></span><br><span class="line"></span><br><span class="line">----- 上面创建的就是一个两行三列四维的数组。</span><br><span class="line"></span><br><span class="line">myarray[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>] <span class="number">15</span></span><br><span class="line"></span><br><span class="line">----- 提取数组中第三个维度中的第一行第二列的数据</span><br><span class="line"></span><br><span class="line">myarray[<span class="number">1</span>,<span class="number">2</span>,]</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span> </span><br><span class="line"> <span class="number">3</span>  <span class="number">9</span> <span class="number">15</span> <span class="number">21</span></span><br><span class="line"></span><br><span class="line">----- 提取数据中各个维度中的第一行，第二列的数据</span><br><span class="line"></span><br><span class="line">myarray[<span class="number">1</span>,,<span class="number">3</span>]</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span> </span><br><span class="line"> <span class="number">13</span> <span class="number">15</span> <span class="number">17</span></span><br><span class="line"></span><br><span class="line">----- 提取第三维度，第一行所有的数据</span><br><span class="line"></span><br><span class="line">myarray[,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span> </span><br><span class="line">15 <span class="number">16</span></span><br><span class="line"></span><br><span class="line">----- 提取第三维度第二列的所有数据</span><br><span class="line"></span><br><span class="line">myarray[<span class="number">1</span>,,] </span><br><span class="line">  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">1 <span class="number">1</span>  <span class="number">7</span> <span class="number">13</span> <span class="number">19</span></span><br><span class="line">2 <span class="number">3</span>  <span class="number">9</span> <span class="number">15</span> <span class="number">21</span></span><br><span class="line">3 <span class="number">5</span> <span class="number">11</span> <span class="number">17</span> <span class="number">23</span></span><br><span class="line"></span><br><span class="line">----- 提取各个维度第一行的数据。</span><br></pre></td></tr></table></figure>
<p><strong>数据框：</strong></p>
<p>数据框是使用最多的一种数据结构，形式上与矩阵相似，但是这种数据结构可以存储不同的数据类型的数据。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mydata &lt;- data.frame(col1,clo2,col3,,,,,row.names,,)</span><br><span class="line"></span><br><span class="line">col1 : 第一列数据</span><br><span class="line">col2 ： 第二列数据</span><br><span class="line">......</span><br><span class="line">row.names ： 行名向量。</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">name &lt;- <span class="built_in">c</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>)</span><br><span class="line">age &lt;- <span class="built_in">c</span>(<span class="number">12</span>,<span class="number">13</span>,<span class="number">13</span>,<span class="number">14</span>)</span><br><span class="line">classlevel &lt;- <span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">ismale &lt;- <span class="built_in">c</span>(<span class="built_in">T</span>,<span class="built_in">T</span>,<span class="built_in">F</span>,<span class="built_in">F</span>)</span><br><span class="line">mydata &lt;- data.frame(name,age,classlevel,ismale)</span><br><span class="line">mydata</span><br><span class="line"></span><br><span class="line">   name age classlevel ismale</span><br><span class="line">1    a  <span class="number">12</span>          <span class="number">1</span>   <span class="literal">TRUE</span></span><br><span class="line">2    b  <span class="number">13</span>          <span class="number">2</span>   <span class="literal">TRUE</span></span><br><span class="line">3    <span class="built_in">c</span>  <span class="number">13</span>          <span class="number">2</span>  <span class="literal">FALSE</span></span><br><span class="line">4    d  <span class="number">14</span>          <span class="number">3</span>  <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">----- 创建矩阵</span><br><span class="line"></span><br><span class="line">mydata[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"></span><br><span class="line">----- 提取矩阵中第一行第二列的数据</span><br><span class="line"></span><br><span class="line">mydata[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line">   name age</span><br><span class="line">1    a  <span class="number">12</span></span><br><span class="line">2    b  <span class="number">13</span></span><br><span class="line">3    <span class="built_in">c</span>  <span class="number">13</span></span><br><span class="line">4    d  <span class="number">14</span></span><br><span class="line"></span><br><span class="line">----- 提取矩阵前两列的数据</span><br><span class="line"></span><br><span class="line">mydata[<span class="built_in">c</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)]</span><br><span class="line">   name age</span><br><span class="line">1    a  <span class="number">12</span></span><br><span class="line">2    b  <span class="number">13</span></span><br><span class="line">3    <span class="built_in">c</span>  <span class="number">13</span></span><br><span class="line">4    d  <span class="number">14</span></span><br><span class="line"></span><br><span class="line">----- 提取矩阵列命为name与age的两列</span><br><span class="line"></span><br><span class="line">mydata$age</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span> <span class="number">13</span> <span class="number">13</span> <span class="number">14</span></span><br><span class="line"></span><br><span class="line">----- 提取矩阵age这一列，在矩阵中$符号可以用来提取特定的列。</span><br></pre></td></tr></table></figure>
<p>与矩阵有关的几个函数：<code>attach()</code> , <code>detach()</code> , <code>with()</code> .</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">attach()</span><br><span class="line"></span><br><span class="line">&gt; attach(mydata)</span><br><span class="line">The following objects are masked _by_ .GlobalEnv:</span><br><span class="line"></span><br><span class="line">    age, classlevel, ismale, name</span><br><span class="line"></span><br><span class="line">&gt; age</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span> <span class="number">13</span> <span class="number">13</span> <span class="number">14</span></span><br><span class="line">&gt; <span class="built_in">c</span>(age,name)</span><br><span class="line">[<span class="number">1</span>] <span class="string">&quot;12&quot;</span> <span class="string">&quot;13&quot;</span> <span class="string">&quot;13&quot;</span> <span class="string">&quot;14&quot;</span> <span class="string">&quot;a&quot;</span>  <span class="string">&quot;b&quot;</span>  <span class="string">&quot;c&quot;</span>  <span class="string">&quot;d&quot;</span></span><br><span class="line"></span><br><span class="line">----- 通过attach()函数可以将数据框放在搜索路径中，这时可以直接通过列名去调取数据框中的数据，而不用$等符号，R会主动首先搜索attach的数据框。</span><br><span class="line"></span><br><span class="line">&gt; age &lt;- <span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">&gt; attach(mydata)</span><br><span class="line">The following objects are masked _by_ .GlobalEnv:</span><br><span class="line"></span><br><span class="line">    age, classlevel, ismale, name</span><br><span class="line"></span><br><span class="line">The following objects are masked from mydata (pos = <span class="number">3</span>):</span><br><span class="line"></span><br><span class="line">    age, classlevel, ismale, name</span><br><span class="line"></span><br><span class="line">&gt; age</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">----- 从上面的例子我们可以看到，这种attach()将数据加到搜索路径中的方法存在一些缺点，</span><br><span class="line">      就是如果先前存在数据框中的同名变量，这时原先的变量将取得优先权。所有上面age输出的不是数据框中的数据。</span><br><span class="line"></span><br><span class="line">detach()</span><br><span class="line"></span><br><span class="line">----- 通过这个函数可以将数据框从搜索路径中移除。</span><br><span class="line"></span><br><span class="line">with()</span><br><span class="line"></span><br><span class="line">&gt; age &lt;- <span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">&gt; with(mydata,age)</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span> <span class="number">13</span> <span class="number">13</span> <span class="number">14</span></span><br><span class="line"></span><br><span class="line">----- 由于上面attach存在的一些缺点，我们可以看到通过with函数可以得到解决，这个函数将运算集中在数据框中。</span><br></pre></td></tr></table></figure>
<p><strong>因子：</strong></p>
<p>因子是数据结构在统计中是一个非常有用的概念，这种变量对于定序变量与定类变量非常有用，费别可以用有序因子和无须因子表示。在R中是通过factor() 函数创建因子，这个函数其实是以一个整数向量的形式存储类别值，同时用一个字符串（原始值）的向量映射到这个整数向量中。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">factor(x,levels,labels=levels，ordered=<span class="literal">FALSE</span>)</span><br><span class="line"></span><br><span class="line">x : 字符串向量</span><br><span class="line">levels ：指定因子的水平</span><br><span class="line">labels : 为每个水平定义一个值标签</span><br><span class="line">ordered ： 是否是有序因子（如果不给的level则会按照英文字母去给定序）</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">fruit &lt;- <span class="built_in">c</span>(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;strawberry&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;watermelon&quot;</span>,<span class="string">&quot;grape&quot;</span>)</span><br><span class="line">factor(fruit)</span><br><span class="line">[<span class="number">1</span>] apple      orange     strawberry banana     watermelon grape     </span><br><span class="line">Levels: apple banana grape orange strawberry watermelon</span><br><span class="line"></span><br><span class="line">----- 上面创建的是一个无序因子，默认按照字母的顺序排列。</span><br><span class="line"></span><br><span class="line">fruit &lt;- <span class="built_in">c</span>(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;strawberry&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;watermelon&quot;</span>,<span class="string">&quot;grape&quot;</span>)</span><br><span class="line">factor(fruit,ordered=<span class="literal">TRUE</span>)</span><br><span class="line">[<span class="number">1</span>] apple      orange     strawberry banana     watermelon grape     </span><br><span class="line">6 Levels: apple &lt; banana &lt; grape &lt; orange &lt; ... &lt; watermelon</span><br><span class="line"></span><br><span class="line">----- 上面创建的是一个有序的因子。同样默认是按照首字母的顺序排列的。</span><br><span class="line"></span><br><span class="line">fruit &lt;- <span class="built_in">c</span>(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;strawberry&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;watermelon&quot;</span>,<span class="string">&quot;grape&quot;</span>)</span><br><span class="line">factor(fruit,ordered=<span class="literal">TRUE</span>,level=<span class="built_in">c</span>(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;strawberry&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;watermelon&quot;</span>,<span class="string">&quot;grape&quot;</span>,<span class="string">&quot;orange&quot;</span>))</span><br><span class="line">[<span class="number">1</span>] apple      orange     strawberry banana     watermelon grape     </span><br><span class="line">6 Levels: apple &lt; strawberry &lt; banana &lt; watermelon &lt; ... &lt; orange</span><br><span class="line"></span><br><span class="line">----- 上面创建的因子是一个有序因子我们自己通过level给定了因子的序。</span><br><span class="line"></span><br><span class="line">factor(fruit,ordered=<span class="literal">TRUE</span>,level=<span class="built_in">c</span>(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;strawberry&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;watermelon&quot;</span>,<span class="string">&quot;grape&quot;</span>,<span class="string">&quot;orange&quot;</span>),labels=<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">Levels: <span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span> &lt; <span class="number">4</span> &lt; <span class="number">5</span> &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line">----- 上面同样是一个有序的因子，我们通过给定了自己的序，且给每一种水果一个值标签，<span class="number">1</span> 表示apple等</span><br></pre></td></tr></table></figure>
<p><strong>列表：</strong></p>
<p>列表是另外一种数据结构，这是R中最复杂的一种数据结构，在列表中可以存放各种R对象，可以是列表，矩阵，数据框等。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mylist &lt;- <span class="built_in">list</span>(object1,object2,object3,,,,,)llllll</span><br><span class="line"></span><br><span class="line">object : 都是列表中的对象</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">a &lt;- <span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">b &lt;- matrix(<span class="number">1</span>:<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">c</span> &lt;- data.frame(<span class="number">1</span>:<span class="number">3</span>,<span class="built_in">c</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>))</span><br><span class="line">mylist &lt;- <span class="built_in">list</span>(name=a,b,<span class="built_in">c</span>)</span><br><span class="line">mylist</span><br><span class="line"></span><br><span class="line">$name</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">2</span>]]</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">3</span>    <span class="number">5</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">4</span>    <span class="number">6</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">3</span>]]</span><br><span class="line">  name1 name2</span><br><span class="line">1     <span class="number">1</span>     a</span><br><span class="line">2     <span class="number">2</span>     b</span><br><span class="line">3     <span class="number">3</span>     <span class="built_in">c</span></span><br><span class="line"></span><br><span class="line">----- 上面创建一个列表，这个列表中包括一个向量，一个矩阵，一个数据框三种数据结构。在列表中可以通过 name= 来对每一个对象命名。</span><br><span class="line"></span><br><span class="line">&gt; mylist[[<span class="number">2</span>]]</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">3</span>    <span class="number">5</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">4</span>    <span class="number">6</span></span><br><span class="line"></span><br><span class="line">&gt; mylist[[<span class="string">&quot;name&quot;</span>]]</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">----- 列表中数据的提取。</span><br></pre></td></tr></table></figure>
<p>列表是R中非常重要的一个数据结构，在R中许多函数的输出结果是以列表的形式给出的。</p>
<hr>
<h2 id="数据的输入"><a href="#数据的输入" class="headerlink" title="数据的输入"></a>数据的输入</h2> <iframe id="embed_dom" name="embed_dom" frameborder="0" style="display:block;width:525px; height:245px;" src="https://www.processon.com/embed/5f7426107d9c0806f2605fe1"></iframe>

<h3 id="手动输入"><a href="#手动输入" class="headerlink" title="手动输入"></a>手动输入</h3><p>在R语言中可以通过调出数据编辑器手动输入数据。步骤如下：</p>
<ol>
<li>创建一个空矩阵或数据框</li>
<li>针对上面创建的数据结构调用数据编辑器。输入数据保存</li>
</ol>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">myedit &lt;- data.frame(age=numeric(<span class="number">0</span>),name=character(<span class="number">0</span>))</span><br><span class="line">myedit &lt;- edit(myedit)</span><br><span class="line"></span><br><span class="line">----- 通过上面的edit可以调出一个类似于excel的数据编辑框对数据进行编辑。</span><br></pre></td></tr></table></figure>
<p>上面通过numeric(0)可以创建一个只是指定数据模式但是不包含数据的向量。</p>
<h3 id="分隔符文本导入"><a href="#分隔符文本导入" class="headerlink" title="分隔符文本导入"></a>分隔符文本导入</h3><p>R语言中可以直接从以分隔符分隔的文本文件中导入数据，通过read.table()函数可以读入一个表格格式的文件，并且存储在一个数据框中。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mycsv &lt;- read.table(file,options(header,sep,row.names,col.names,skip,stringASFactors,colClasses,,,,))</span><br><span class="line"></span><br><span class="line">file :这是一个以分隔符分隔的ASCII文本文件。</span><br><span class="line">options :是函数的可选参数集合，包括很多参数</span><br><span class="line">	header :文件是否在第一行包含了变量名。</span><br><span class="line">	sep :说明文件是以什么符号分隔数据的，默认的sep=<span class="string">&quot; &quot;</span>是以空格，制表符，换行，回车等分隔的。可以使用sep=<span class="string">&quot;,&quot;</span>来指定逗号为分隔符。</span><br><span class="line">	row.names : 用来指定行名</span><br><span class="line">	col.names :用于指定列名</span><br><span class="line">	skip :这个参数可以指定是否跳过文件中的前几行数据。</span><br><span class="line">	stringASFactors :read.table()函数默认将字符串读取为因子，可以通过设置该参数为<span class="literal">FALSE</span>将这一行为取消。</span><br><span class="line">	colClasses :可以通过这个参数去指定每一列的数据类型。</span><br><span class="line">	，，，，，</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">创建一个txt文件，内容为：</span><br><span class="line"></span><br><span class="line">张三 李四 王五 赵六</span><br><span class="line">男 男 男 男</span><br><span class="line">23 <span class="number">24</span> <span class="number">34</span> <span class="number">44</span></span><br><span class="line"></span><br><span class="line">存放在C:\\Users\\SweepingRobot\\Desktop。</span><br><span class="line"></span><br><span class="line">mydata &lt;- read.table(<span class="string">&quot;C:/Users/SweepingRobot/Desktop/data.txt&quot;</span>,header=<span class="literal">TRUE</span>)</span><br><span class="line"></span><br><span class="line">----- 上面通过read.table()函数读取位于桌面上的以空格分隔的txt文件，开头包含变量名。</span><br></pre></td></tr></table></figure>
<p>在R语言中路径不能使用反斜杠分隔，因为在R语言中反斜杠是转义的符号，所有要用斜杆。</p>
]]></content>
      <categories>
        <category>R语言</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据操作</tag>
      </tags>
  </entry>
  <entry>
    <title>R语言简单的simulation</title>
    <url>//posts/0008/</url>
    <content><![CDATA[<p>R语言提供了很多的概率分布的函数以及产生随机数的函数，通过这些函数我们可以做一些简单的simulation。</p>
<a id="more"></a>
<h3 id="通过simulation来计算-Π-的值"><a href="#通过simulation来计算-Π-的值" class="headerlink" title="通过simulation来计算 Π 的值"></a>通过simulation来计算 Π 的值</h3><p>我们通过在R语言中通过simulation的方法近似的去估计 Π 的数值。</p>
<h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><ul>
<li>生成从一个 x 属于(-1,1) , y 属于(-1,1)的正方形中产生大量的随机点N。</li>
<li>计算产生的大量的随机点在圆心位于圆点，半径为1的点的个数M。</li>
<li>基于大数定律当N趋于无穷大时有下面的等式成立：</li>
</ul>
<script type="math/tex; mode=display">
\frac{n}{N} = \frac{\pi \cdot r^2}{4}</script><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">N</span> &lt;- <span class="number">100000</span></span><br><span class="line"><span class="attribute">x</span> &lt;- runif(N,min = -<span class="number">1</span>,max = <span class="number">1</span>)</span><br><span class="line"><span class="attribute">y</span> &lt;- runif(N,min = -<span class="number">1</span>,max = <span class="number">1</span>)</span><br><span class="line"><span class="comment">#产生100000个随机点。</span></span><br><span class="line"><span class="attribute">z</span> &lt;- sum(x^<span class="number">2</span>+y^<span class="number">2</span>&lt;=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#统计100000个随机点中位于圆中的个数。</span></span><br><span class="line"><span class="attribute">pai</span> &lt;- z/N*<span class="number">4</span></span><br><span class="line"><span class="comment">#计算pai的数值</span></span><br></pre></td></tr></table></figure>
<p><img data-src="http://ww1.sinaimg.cn/large/007DtFxUly1gl0dsirz0vj30lj0lkmzj.jpg" alt="图一" style="zoom:50%;" /></p>
<p>上面就是简单的simulation计算 Π 的估计值。</p>
<h3 id="验证正态分布的3-sigma-法则"><a href="#验证正态分布的3-sigma-法则" class="headerlink" title="验证正态分布的3$ \sigma $法则"></a>验证正态分布的3$ \sigma $法则</h3><p>在统计学上存在一个3$ \sigma $法则：</p>
<p><blockquote class="quoteback" darkmode="" data-title="%E7%BB%8F%E9%AA%8C%E6%B3%95%E5%88%99%EF%BC%88%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%8E%9F%E7%90%86%EF%BC%89_%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91" data-author="" cite="https://baike.baidu.com/item/%E7%BB%8F%E9%AA%8C%E6%B3%95%E5%88%99%EF%BC%88%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%8E%9F%E7%90%86%EF%BC%89">
                      经验规则是统计规律，指出了在正态分布，几乎所有数据都将落在均值的三倍标准差内。所述经验规则表明，68%的数据将分布在的第一个标准偏差之内，95%将落在第二个标准差之内，和99.7%将落在均值的前三个标准偏差之内。
                      <footer> <cite><a href="https://baike.baidu.com/item/%E7%BB%8F%E9%AA%8C%E6%B3%95%E5%88%99%EF%BC%88%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%8E%9F%E7%90%86%EF%BC%89">https://baike.baidu.com/item/%E7%BB%8F%E9%AA%8C%E6%B3%95%E5%88%99%EF%BC%88%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%8E%9F%E7%90%86%EF%BC%89</a></cite></footer>
                      </blockquote><script note="" src="https://cdn.jsdelivr.net/gh/Blogger-Peer-Review/quotebacks@1/quoteback.js"></script></p>
<p>我们可以对这个法则进行简单的 simulation。</p>
<h4 id="基本思路-1"><a href="#基本思路-1" class="headerlink" title="基本思路"></a>基本思路</h4><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">plot(<span class="name">x</span>,y,pch=<span class="string">&quot;.&quot;</span>)</span><br><span class="line">lines(<span class="name">seq</span>(<span class="name">-2</span>,<span class="number">2</span>,length=500),dnorm(<span class="name">seq</span>(<span class="name">-2</span>,<span class="number">2</span>,length=500)),col=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">abline(<span class="name">v=c</span>(<span class="name">-2</span>,<span class="number">2</span>),col=<span class="string">&quot;red&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img data-src="http://ww1.sinaimg.cn/large/007DtFxUly1gl0cwutxy5j30if07n3yh.jpg" alt="图二"></p>
<ul>
<li>如上图二所示，我们在产生在2$ \sigma $长的长方形中大量的随机点N个</li>
<li>计算位于正态分布下部的点的个数m</li>
<li>通过下面的式子可以计算是否大致符合经验法则</li>
</ul>
<script type="math/tex; mode=display">
\frac{m}{N}\cdot 2 \cdot dnorm(0) \simeq 0.9544</script><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">N</span> &lt;- <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line">#一个标准差</span><br><span class="line"></span><br><span class="line">x &lt;- runif(<span class="built_in">N</span>,<span class="built_in">min</span> = -<span class="number">1</span>,<span class="built_in">max</span> = <span class="number">1</span>)</span><br><span class="line">y &lt;- runif(<span class="built_in">N</span>,<span class="built_in">min</span> = <span class="number">0</span>,<span class="built_in">max</span> = dnorm(<span class="number">0</span>))</span><br><span class="line"><span class="symbol">z1</span> &lt;- <span class="built_in">sum</span>(y&lt;dnorm(x))/<span class="built_in">N</span>*(<span class="number">2</span>*dnorm(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#两个标准差</span><br><span class="line"></span><br><span class="line">x &lt;- runif(<span class="built_in">N</span>,<span class="built_in">min</span> = -<span class="number">2</span>,<span class="built_in">max</span> = <span class="number">2</span>)</span><br><span class="line">y &lt;- runif(<span class="built_in">N</span>,<span class="built_in">min</span> = <span class="number">0</span>,<span class="built_in">max</span> = dnorm(<span class="number">0</span>))</span><br><span class="line"><span class="symbol">z2</span> &lt;- <span class="built_in">sum</span>(y&lt;dnorm(x))/<span class="built_in">N</span>*(<span class="number">4</span>*dnorm(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">#三个标准差</span><br><span class="line"></span><br><span class="line">x &lt;- runif(<span class="built_in">N</span>,<span class="built_in">min</span> = -<span class="number">3</span>,<span class="built_in">max</span> = <span class="number">3</span>)</span><br><span class="line">y &lt;- runif(<span class="built_in">N</span>,<span class="built_in">min</span> = <span class="number">0</span>,<span class="built_in">max</span> = dnorm(<span class="number">0</span>))</span><br><span class="line"><span class="symbol">z3</span> &lt;- <span class="built_in">sum</span>(y&lt;dnorm(x))/<span class="built_in">N</span>*(<span class="number">6</span>*dnorm(<span class="number">0</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>R语言</category>
        <category>统计应用</category>
      </categories>
      <tags>
        <tag>R语言</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Rvest的爬虫</title>
    <url>//posts/rvest/</url>
    <content><![CDATA[<p><img data-src="http://ww1.sinaimg.cn/large/007DtFxUly1gk9qsre6j9j306o07qmxq.jpg" width="20%" height="20%" title="◎ rvest" alt="rvest"/></p>
<a id="more"></a>
<h2 id="关于rvest包"><a href="#关于rvest包" class="headerlink" title="关于rvest包"></a>关于rvest包</h2><p><code>rvest</code> 包是Hadley Wickham开发的一个能够非常容易的从网页获取数据的包，这个包使用起来非常的容易，<code>rvest</code>的灵感来源于<code>BeautifulSoup</code>（<code>python</code>中的一个非常有名的解析库）。</p>
<p>但是我的理解是这个包实际上不能直接从网络中获取<code>HTML</code>文件，而是通过<code>xml2</code> 包中的<code>read_html()</code> 获取<code>HTML</code>文件或者是通过其他的方式获取了<code>html</code>文件之后再转给<code>rvest</code>，用<code>rvest</code>包中的函数来非常方便的去提取数据。加载<code>rvest</code>的同时也会加载<code>xml2</code>包。</p>
<p><code>read_html()</code> 函数：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">read_html(x, encoding = <span class="string">&quot;&quot;</span>, ..., options = <span class="built_in">c</span>(<span class="string">&quot;RECOVER&quot;</span>, <span class="string">&quot;NOERROR&quot;</span>, <span class="string">&quot;NOBLANKS&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个函数可以从互联网中获取网页内容，x为网页的URL，encoding是指定网页的编码方式。</span></span><br></pre></td></tr></table></figure>
<p>这个函数获取<code>html</code>文件的功能是非常的有限的，因为他没有伪装，无法获取动态网页的全部内容，有些网页中存在异步加载，文件中包含js脚本，浏览器可以通过加载js脚本去更新数据，但是用R这种方式获取<code>html</code>文件是无法获取所有的内容的。必须要使用<code>rselenium</code>包通过虚拟浏览器的方式去进行获取。</p>
<p><code>rvest</code>包中存在下面这些函数：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">back	History navigation tools</span><br><span class="line">encoding	Guess and repair faulty character encoding.</span><br><span class="line">follow_link	Navigate to a new url.</span><br><span class="line">google_form	Make link to google form given id</span><br><span class="line">guess_encoding	Guess and repair faulty character encoding.</span><br><span class="line">html	Parse an HTML page.</span><br><span class="line">html_attr	Extract attributes, text and tag name from html.</span><br><span class="line">html_attrs	Extract attributes, text and tag name from html.</span><br><span class="line">html_children	Extract attributes, text and tag name from html.</span><br><span class="line">html_form	Parse forms <span class="keyword">in</span> a page.</span><br><span class="line">html_name	Extract attributes, text and tag name from html.</span><br><span class="line">html_node	Select nodes from an HTML document</span><br><span class="line">html_nodes	Select nodes from an HTML document</span><br><span class="line">html_session	Simulate a session <span class="keyword">in</span> an html browser.</span><br><span class="line">html_table	Parse an html table into a data frame.</span><br><span class="line">html_text	Extract attributes, text and tag name from html.</span><br><span class="line">is.session	Simulate a session <span class="keyword">in</span> an html browser.</span><br><span class="line">jump_to	Navigate to a new url.</span><br><span class="line">pluck	Extract elements of a <span class="built_in">list</span> by position.</span><br><span class="line">read_xml.session	Parse an HTML page.</span><br><span class="line">repair_encoding	Guess and repair faulty character encoding.</span><br><span class="line">session_history	History navigation tools</span><br><span class="line">set_values	Set values <span class="keyword">in</span> a form.</span><br><span class="line">submit_form	Submit a form back to the server.</span><br></pre></td></tr></table></figure>
<p><code>rvest</code>包中经常使用的有下面几个：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">html_nodes(x, css, xpath)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个函数用于从html文件中去定位到需要的内容的节点的位置；</span></span><br><span class="line"><span class="comment">#定位的方式有两种一种是通过xpath定位一种是通过css进行定位</span></span><br><span class="line"></span><br><span class="line">html_node(x, css, xpath)</span><br><span class="line"></span><br><span class="line"><span class="comment">#只是输出一个元素</span></span><br><span class="line">----</span><br><span class="line">html_text(x, trim = <span class="literal">FALSE</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个包用来获取html文件中的文本数据。x是定位到的文本所在的节点；trim参数可以去掉文本前后的空格</span></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">html_table(x, header = <span class="literal">NA</span>, trim = <span class="literal">TRUE</span>, fill = <span class="literal">FALSE</span>, dec = <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个函数用来读取网页中的表格，转化为数据框</span></span><br><span class="line"><span class="comment">#x：一个html文件、或者是一个节点、节点集。 </span></span><br><span class="line"><span class="comment">#header：是否将第一行设为表头？如果为NA，则默认的是当含有&lt;th&gt;标签时，将以第一行作为表头。</span></span><br><span class="line"><span class="comment">#trim：去掉内容中前后的空格</span></span><br><span class="line"><span class="comment">#fill：缺失值是否自动填充</span></span><br><span class="line"><span class="comment">#dec：转化为十进制</span></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">html_attr(x, name, default = <span class="literal">NA_character_</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取属性内容，x是节点，name获取节点中哪个属性的值。</span></span><br></pre></td></tr></table></figure>
<h2 id="数据爬取步骤"><a href="#数据爬取步骤" class="headerlink" title="数据爬取步骤"></a>数据爬取步骤</h2><p><code>rvest</code>爬取数据的步骤非常的简单，一般来说是三步：</p>
<ol>
<li>读取网页：借助<code>read_html()</code>函数去读取网页</li>
<li>爬取内容：从读取下来的网页中获取想要的内容：<ol>
<li>定位：从html节点文件中找到目标数据的位置，用<code>html_nodes()</code> 读取节点</li>
<li>解析，获取数据：用html_text()等函数获取定位到的节点的数据。</li>
</ol>
</li>
</ol>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#爬取静态网站pubmed示例</span></span><br><span class="line"><span class="comment">#调用包</span></span><br><span class="line">library(<span class="string">&quot;rvest&quot;</span>)</span><br><span class="line"><span class="comment">#第一步、读取网页。</span></span><br><span class="line">page_content &lt;- read_html( x= <span class="string">&quot;&lt;http://www.stats.gov.cn/tjsj/zxfb/202010/t20201027_1796416.html&gt;&quot;</span> )</span><br><span class="line"><span class="comment">#第二步、爬取内容。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.1、定位</span></span><br><span class="line"><span class="comment">#xpath:使用xpat定位</span></span><br><span class="line"><span class="comment">#css：优点：简洁 缺点：定位可能不精确。</span></span><br><span class="line">node &lt;- <span class="string">&#x27;//*[@id=&quot;search-results&quot;]/section/div[1]/div/article[1]/div[2]/div[1]/a&#x27;</span></span><br><span class="line">nodes_content &lt;- html_nodes(x = page_content,xpath = node)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.2、爬起数据</span></span><br><span class="line">html_text(x = nodes_content,trim = <span class="built_in">T</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://pubmed.ncbi.nlm.nih.gov/">PubMed</a> 是一个免费的搜索引擎，提供生物医学方面的论文搜索以及摘要。</p>
<p>上面用的是<code>xpath</code> 进行定位，也可以使用<code>css</code>进行定位；这两种定位各有各的优缺点。</p>
<h3 id="xpath定位"><a href="#xpath定位" class="headerlink" title="xpath定位"></a>xpath定位</h3><p><code>xpath</code>简单的来说是直接通过路径来进行定位，如：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">//*[@id=<span class="string">&quot;search-results&quot;</span>]/section/div[<span class="number">1</span>]/div/article[<span class="number">1</span>]/div[<span class="number">2</span>]/div[<span class="number">1</span>]/a</span><br></pre></td></tr></table></figure>
<p>这种形式就类似于我们文件夹中的路径，有两种路径：</p>
<ol>
<li>绝对路径：路径以<code>/</code>符号分隔，非常精确的定位到节点所在的位置</li>
<li>相对路径：路径中用<code>//</code> 来进行表示相对的路径</li>
</ol>
<p>例如有两个小区，每个小区两栋楼一单元与二单元，每一栋楼有五层。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">一号小区/一单元/二楼  </span><br><span class="line"><span class="comment">#绝对定位，一号小区一单元二楼</span></span><br><span class="line"></span><br><span class="line">一号小区//二楼</span><br><span class="line"><span class="comment">#采用了相对路径，一号小区所有的二楼，既包括一单元的也包括二单元的二楼</span></span><br><span class="line"></span><br><span class="line">//二楼</span><br><span class="line"><span class="comment">#相对路径，各个小区各个单元的二楼</span></span><br></pre></td></tr></table></figure>
<p>在谷歌浏览器中可以直接在浏览器中检查源代码（F12），定位到节点复制xpath地址，使用起来非常的简单。</p>
]]></content>
      <categories>
        <category>R语言</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>学校食堂的感想</title>
    <url>//posts/0009/</url>
    <content><![CDATA[<p>几乎和昨天一样，中午小憩一会休息好之后，蹭着食堂人少悠哉游哉的去食堂吃饭，今天中午吃麻辣烫，吃麻辣烫的这家店铺不单单有麻辣烫还可以吃饭，这家店铺的生意在食堂里面是非常不错的！</p>
<a id="more"></a>
<p>不一会，我的午餐就好了，我去出餐处去取自己的午餐回到自己的餐桌上，几乎同时一个女生拿着餐盘从餐桌走向取餐处，看了一眼没怎么在意，因为我急着吃午饭。</p>
<p>可是不一会女生和店员就开始理论起来了，双方你一句我一句，说话的同时不忘拿着筷子在那个女生的餐盘中翻翻点点，饭里面有一下“乱七八糟”的东西。看着他们互相理论一会之后，双方拿出手机，店员扫了对方的二维码，似乎是退会这一餐的饭钱，然后就这样结束了！</p>
<p>你们理论的停止确实我思考的开始！</p>
]]></content>
      <categories>
        <category>闲言碎语</category>
        <category>生活</category>
      </categories>
      <tags>
        <tag>食品卫生</tag>
      </tags>
  </entry>
  <entry>
    <title>理想中的学者</title>
    <url>//posts/2/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>今天的内卷是一个陀螺式的死循环</p>
<p><strong>项飙</strong></p>

</blockquote>
<blockquote>
<p>今天的内卷是一个陀螺式的死循环，我们要不断的要抽打自己，让自己就这么空转，每天要不断地自己动员自己是吧？所以它是一个高度动态的陷阱，所以非常耗能的。[1]</p>
</blockquote>
<a id="more"></a>
<p>这些天一直在听项飙的一些音频，有关于移民、世界国民以及内卷化的一些内容，从这些音频中进一步加深了对项飙的印象。对于项飙这个名字很多人都非常的陌生，因为作为一个人类学家，项飙从研究生开始就去了牛津，后来也一直在国外任教，以前几乎很少在国内的社交媒体中亮相。</p>
<p>对于我来说，第一次知道项飙也是今年早些时候的事，由于疫情的原因待在家里，通过看许知远的<strong>《十三邀》</strong>认识到了项飙这个人，看完那期节目后我对于项飙印象非常的深刻，之所以这样就我个人来说认为是有很多的原因的：</p>
<p>首先是他的外观：在节目中，他是一个个子不高皮肤较黑身体非常的瘦的人，打扮的也非常的朴素，一眼看起来非常就是非常的平易近人的样子，丝毫没有架子气。这一切感觉似乎都与他身上的头衔有一丝不符，之所以有这种感觉我想是因为平常所看到的一些所谓的学者似乎很多都是 “ 油光满面 ” ，西装革履，似乎看起来就没那么亲近了。</p>
<p><img data-src="http://ww1.sinaimg.cn/large/007DtFxUly1gkakmilwh4j30u00gw3z3.jpg" title="◎ 项飙" width="80%" height="50%" /></p>
<p>其实让我最印象深刻的并不是他的外在的一面，而是作为一个学者内在的一面。在听他与许知远的对话的过程中有一种特别的舒服的感觉，在为一个人类学家，他在讨论有关于 “ 附近 ” 等社会学问题的时候并没有用那些多么高深的专业语句，而是非常的清晰的简洁的向听众讲述了他对专业问题的见解，更重要的是他展示了自己的整个的思考的过程，我认为这是最让我难忘的一点。</p>
]]></content>
      <categories>
        <category>闲言碎语</category>
      </categories>
      <tags>
        <tag>项飙</tag>
        <tag>人类学</tag>
      </tags>
  </entry>
  <entry>
    <title>真的有理想的工作吗？</title>
    <url>//posts/5/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>最理想的一个工作状态就是我可以去做我想做的事情，你不要去问我想做什么，因为我自己也不知道。</p>

</blockquote>
<p>今天周末休息半天，没事在吃饭的时候边吃边在看 YouTube 上的一个系列视频 — 。一句话简单的评价就是这是一个很接地气的视频节目。</p>
<a id="more"></a>
<p>在这些视频中有一个视频是采访几个90后的“打工人”，询问他们是否对自己的工作状态感到满意，他们理想的工作状态是上面呢？虽然自己还没有到他们那一步但是看了感到莫名的触动！</p>
<p>通过他们采访的回答，很容易的发现他们存在很多的共同点：</p>
<ol>
<li>他们由于各种各样的原因对自己的工作状态表示不满意；有的认为工作很辛苦，有的认为工作的人际关系复杂，所谓的<strong>办公室政治</strong>（头一次听到，很有意思的一个词语）。总而言之是不满意。</li>
<li>当问他们的理想的工作状态的时候，有一个女孩的回答就是前面引用的那句话，而其他几个的回答也几乎是差不多的想去做自己喜欢做的事情。</li>
</ol>
<p>我很喜欢那个女孩的回答，她的回答是一类人的回答，仔细想想或许以后也会是自己的回答吧！我不禁的思考为什么很多人想去做自己想做的事情，却有的时候竟然不知道自己想做的是什么呢？</p>
<p>我的思绪飘到了前一段时间听的项飙的一个关于“内卷”化的访谈。在节目中项飙认为我们现在之所以存在如此严重的所谓的“内卷”化的现象是有原因的：</p>
<p><strong>高度一体化的竞争机制。</strong></p>
<blockquote>
<p>全国人民朝着一个目标去，要多赚钱，买一百多平的房子，要买车，一定要成家。一定年龄做一定的事情是等等。这个线是规划的非常好的，大家高度一体化的，都要在这样一个市场里面争夺一样东西，是高度一体的。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
</blockquote>
<p>我们存在生活于一个由这样的机制所主导的社会中，计划每个人都通过相同的竞争方式（不断的考核）接受相同的价值评价体系去获得那高度相同的社会目标。</p>
<p><strong>缺乏退出机制</strong></p>
<p>我们会想，既然存在如此可怕的竞争机制，那我退出不好吗？问题是你一但进入（准确的说是一出生）这种竞争的机制，你几乎很难在从这个机制中退出来。你会面临很多来自各个方面的压力，这些压力会阻止你退出这个机制，就像节目中的那个女孩说的一样，有时你会感到你在无法控制的往自己讨厌的方向前进。</p>
<p>现在或许自己找到了那个答案。我们从小被教育要在学校好好“学习”。学校是一个典型的高度一体化的象征。相同的目标（高分），相同的价值评价体系（考题做对），相同的竞争方式（没完没了的考试），几乎什么都是相同的，甚至是各个科目的老师所教的都是一样的，并不是如何学习，而是如何学习考试，不同的科目教不同的考试方法。</p>
<p>对于很多人在进入社会后，迎接你的还是一个高度一体化的社会。你能想象在这种高度一致的生活中，你能有时间去思考自己真的想要的是什么吗？自己真的想要去做的是什么吗？或许晚上躺在床上在想着“生活不只有眼前的苟且，还有诗和远方的生活”，第二天还是要进入现实的洪波中，由不得你。</p>
<hr>
<p>想了那么多，思考了那么多有用吗？这个回答不过是对“理想”的工作状态的回答。但是现实是：在现实社会是否真的还存在足够的空间，能够让一个普通的人，在完全坚持自己的理想的道理上顺畅的走下去呢？</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="http://mp.weixin.qq.com/s?__biz=MzI2ODU4MDM1Mg==&amp;mid=2247484400&amp;idx=1&amp;sn=92e164d86a19f06e144e42a75fb3c792&amp;chksm=eaec209fdd9ba989ed6f9cd8e14dd6ccc8d2fa9dbd68fce905dd296aa90049c3e5e15985844d#rd">项飙访谈：内卷是一种不允许失败和退出的竞争</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      <categories>
        <category>闲言碎语</category>
        <category>社会</category>
      </categories>
      <tags>
        <tag>日常生活</tag>
      </tags>
  </entry>
  <entry>
    <title>高风险的穷人</title>
    <url>//posts/7/</url>
    <content><![CDATA[<p>在书中有一章名为：“赤脚的对冲基金经理”，毫无疑问这应该是这本书这让我影响深刻的一个标题：穷人在某种程度上与基金经理一样几乎无时无刻不面临着非常高的风险，但是他们所面临高风险并没有给他们带来相应的高收益。</p>
<a id="more"></a>
<p>由于高风险的存在，穷人自然也会去使用各种各样的方式去应对风险：</p>
<h3 id="私人处理办法"><a href="#私人处理办法" class="headerlink" title="私人处理办法"></a>私人处理办法</h3><p>例如在书中提到的：</p>
<p>他们面临失业与工资水平下降时，穷人往往会加大他们的工作量，想通过更多的工作去弥补由于可能的失业与低工资给自己带来的损失，尽管从某种意义上来说这种行为是无效的，因为过多的劳动供给只会导致工资的进一步下滑，但这也是穷人面对时的一种处理办法。</p>
<p>他们在面对可能的风险的时候，也会想基金经理一样，采取多元化的策略，“不把所有的鸡蛋放在同一个篮子里”，他们会同时从事多项职业：同一个家庭中的不同的成员会从事不同的职业，同一个家庭成员会从事多种职业。通过这种<strong>多元化</strong>的策略，可以有效的规避由类似于<strong>非系统性风险</strong>所带来的损失。</p>
<p>而这种应对风险的办法也会导致一些问题，他们将面对多元化与专业化的替代选择问题，在多元化的身兼数职的时候，他们可能是以效率作为代价的。</p>
<p>他们在面对可能的风险的时候，还可以通过临时性的搬迁来有规避风险，将家庭的成员分散在不同的地区，一部分留守在老家、一部分去向城市。而穷人的这种临时性的搬迁似乎也会考虑到<strong>“比较优势的原理”</strong>：</p>
<blockquote>
<p>通常情况下，选择迁居的家庭成员大多为印度或墨西哥的男人或十几岁的男孩，还有中国、菲律宾及泰国的女孩，其他人则留在家里</p>
</blockquote>
<p>在一些地方，一些家庭甚至会利用通婚的方式来分散风险，婚姻的双方成为链接两个大的家庭的纽带，形成一个更大的往往处于不同地方的更大的家庭，在某种程度上也增强了对风险的抵抗能力。</p>
<p>当我们生活在一个熟人社会中，我们还可以通过<strong>互相帮助</strong>的方式来应对风险，在一个关系网络中，当某一个家庭出现问题的时候，其他的家庭可以向他提高帮助。当另外的家庭出现问题的时候，我们并向另外的家庭提高帮助，毕竟现实中谁也不能保障自己将一帆风顺。</p>
<p>从理论上来讲，基于这种思路出发的互帮互助是一种非常高效的非正式保险，可以有效的应对风险。但是事实上这种应对风险的方式是存在很大的缺陷的，而缺陷存在的原因可能就是我们对于这种互相帮助的初心都没有高清楚，或许人们很多时候并不是出于希望得到别人的帮助而进行帮助只是出于人道主义对那些特别困难的人提供微不足道的救助，当出现更严重的问题的时候，这种帮助往往就无法发挥有效的作用了。</p>
<p>上面几种在风险面前应对风险“很自然的”的一些方式，这些方式中没有支政府、没有市场的参与。但是这些方式在面对风险的时候或多或少的都存在一些问题。</p>
<h3 id="正规的风险市场"><a href="#正规的风险市场" class="headerlink" title="正规的风险市场"></a>正规的风险市场</h3><p>对于大多数人，应对风险的方式都是通过向保险公司购买保险，对于在日常生活中面临巨大风险穷人来理论上也该如此，他们的需求也会比很多富人更大。但是事实上现实中，穷人的保险市场似乎并没有像想象中的那样存在，之所以出现这种情况是有原因的：</p>
<h4 id="难以投保"><a href="#难以投保" class="headerlink" title="难以投保"></a>难以投保</h4><p>对于保险市场来说，很多险种存在难以避免的一些问题：典型的像医疗保险、车险等所面临的逆向选择与道德风险问题。除此之外如果在一些贫困地区缺乏对保险市场的管理，还存在很多的明目张胆的欺诈行为：</p>
<p>例如书中印度的“牛险”就是一个例子，我们很多时候无法确定牛的状态是死是活，投保人在投保之后在牛状态良好的情况下也会向保险公司寻求理赔，后来保险公司规定理赔需要死牛耳朵，但这无非是促进了另外一个牛耳朵市场的繁荣，诈骗的行为仍然存在。</p>
<p>这一些问题的存在都使得现实中很多险种难以投保。</p>
<h4 id="难以普及"><a href="#难以普及" class="headerlink" title="难以普及"></a>难以普及</h4><p>现实中有些保险是不存在上面所说的逆向选择或者道德风险等问题，但是很多时候穷人的参保率确实非常的低，参保的群体中所缴纳的保费往往是非常的低的。从某种意义上来说似乎穷人并不愿意买保险，显然不是这样的，如果是这样在前面他们采用的种种的规避风险的措施也是没有存在的道理的。但是为什么穷人不愿意购买保险公司的保险呢？</p>
<p><strong>政府的参与</strong></p>
<p>因为对于很多穷人可能认为在自己面对巨大的风险后面有政府进行兜底，政府与一些非盈利的结构的存在对市场造成了破坏。导致穷人不会从市场中购买保险。</p>
<p><strong>可信度</strong></p>
<p>保险需要投保人预先支付一笔保费，而可能的收益是未来的一个不确定性的事故所带来的。所有在很多贫困地区人们对保险存有质疑的态度。</p>
]]></content>
      <categories>
        <category>书籍阅读</category>
        <category>贫穷的本质</category>
      </categories>
      <tags>
        <tag>经济学</tag>
      </tags>
  </entry>
  <entry>
    <title>R语言与蒙特卡洛仿真</title>
    <url>//posts/0010/</url>
    <content><![CDATA[<h2 id="蒙特卡洛仿真"><a href="#蒙特卡洛仿真" class="headerlink" title="蒙特卡洛仿真"></a>蒙特卡洛仿真</h2><p>蒙特卡洛方法利用的就是数理统计中的大数定理与中心极限定理，通过产生大量的随机数来对参数进行估算的一种方法。</p>
<h2 id="伪随机数"><a href="#伪随机数" class="headerlink" title="伪随机数"></a>伪随机数</h2><p>事实上，在计算机中我们利用各种产生随机数的函数所构造的随机数并不是一个真正意义上的随机数，这种随机数是一种伪随机数，可以人为的进行操控。</p>
<p>在R语言种有多种产生伪随机数的方法：</p>
<p><strong>Wichmann-Hil</strong></p>
<blockquote>
<p>“Wichmann-Hill”<br>The seed, .Random.seed[-1] == r[1:3] is an integer vector of length 3, where each r[i] is in 1:(p[i] - 1), where p is the length 3 vector of primes, p = (30269, 30307, 30323). The Wichmann–Hill generator has a cycle length of 6.9536e12 (= prod(p-1)/4, see Applied Statistics (1984) 33, 123 which corrects the original article).</p>
</blockquote>
<p><strong>Marsaglia-Multicarry</strong></p>
<blockquote>
<p>“Marsaglia-Multicarry”:<br>A multiply-with-carry RNG is used, as recommended by George Marsaglia in his post to the mailing list ‘sci.stat.math’. It has a period of more than 2^60 and has passed all tests (according to Marsaglia). The seed is two integers (all values allowed).</p>
</blockquote>
<p><strong>Super-Duper</strong></p>
<blockquote>
<p>“Super-Duper”:<br>Marsaglia’s famous Super-Duper from the 70’s. This is the original version which does not pass the MTUPLE test of the Diehard battery. It has a period of about 4.6*10^18 for most initial seeds. The seed is two integers (all values allowed for the first seed: the second must be odd).</p>
<p>We use the implementation by Reeds et al (1982–84).</p>
<p>The two seeds are the Tausworthe and congruence long integers, respectively. A one-to-one mapping to S’s .Random.seed[1:12] is possible but we will not publish one, not least as this generator is not exactly the same as that in recent versions of S-PLUS.</p>
</blockquote>
<p><strong>Mersenne-Twister</strong></p>
<blockquote>
<p>“Mersenne-Twister”:<br>From Matsumoto and Nishimura (1998); code updated in 2002. A twisted GFSR with period 2^19937 - 1 and equidistribution in 623 consecutive dimensions (over the whole period). The ‘seed’ is a 624-dimensional set of 32-bit integers plus a current position in that set.</p>
<p>R uses its own initialization method due to B. D. Ripley and is not affected by the initialization issue in the 1998 code of Matsumoto and Nishimura addressed in a 2002 update.</p>
</blockquote>
<p>……</p>
<p>在R语言中可以通过 <code>set.seed( )</code> 函数来设定产生随机数的种子</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">set.seed(seed,</span> <span class="string">kind</span> <span class="string">=</span> <span class="literal">NULL</span><span class="string">,</span> <span class="string">normal.kind</span> <span class="string">=</span> <span class="literal">NULL</span><span class="string">,</span> <span class="string">sample.kind</span> <span class="string">=</span> <span class="literal">NULL</span><span class="string">)</span></span><br></pre></td></tr></table></figure>
<p><code>kind</code> 参数可以指定随机数产生的方法。</p>
<p>在R语言中种子产生的方法一般有两种：</p>
<ul>
<li><p>一种是产生不可预测的序列的种子，电脑可以使用内部的时钟，当前分钟过去了多少秒来作为初始值。</p>
</li>
<li><p>我们也可以通过上面的函数来自定义一个随机数的种子，这时我们产生的随机序列是一个可以复现的随机序列，在同一种子下，用同种方法可以产生一个相同的序列。</p>
</li>
</ul>
<h2 id="常用的随机变量的仿真"><a href="#常用的随机变量的仿真" class="headerlink" title="常用的随机变量的仿真"></a>常用的随机变量的仿真</h2><h3 id="伯努利随机变量"><a href="#伯努利随机变量" class="headerlink" title="伯努利随机变量"></a>伯努利随机变量</h3><p>伯努利随机变量是建立在伯努利试验的基础之上的一个随机变量，伯努利试验是一种只有两种结果的试验，例如随机的抛一枚硬币，要么是正面在上，要么是反面在上，结果只有两个。</p>
<p>伯努利变量的仿真可以通过均匀分布来进行 </p>
<p>例如某个班级有50名学生，这些学生要回答同一个问题，而且每一位学生的回答正确率为20%，错误率为80%，这时，这个班级回答问题的成绩可以通过均匀分布来做模拟</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>.seed(<span class="number">23333</span>)</span><br><span class="line">a &lt; - runif(<span class="number">50</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="二项分布随机变量"><a href="#二项分布随机变量" class="headerlink" title="二项分布随机变量"></a>二项分布随机变量</h3><p>二项分布是同样是在伯努利试验的基础之上构建的，在 n 次独立重复的伯努利试验中，成功的次数 x 服从二项分布。</p>
<p><strong>题目：</strong></p>
<p>生成 10000 个二项分布的伪随机数，其参数为20与0.3，将这些生成的随机数复制给变量binsim，假设 X 是一个参数为（20，0.3）的随机变量。用仿真的方法来生成随机数去估算下面的数值：</p>
<ul>
<li>P(X &lt;= 5)</li>
<li>P(x=5)</li>
<li>E(X)</li>
<li>Var(x)</li>
<li>位于95%分位数处的X，（可以使用quantile( )函数)</li>
<li>位于99%分位数处的X。</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; binsim &lt;- rbinom(<span class="number">10000</span>,<span class="number">20</span>,<span class="number">0.3</span>)</span><br><span class="line">&gt; P1 &lt;- sum(binsim&lt;=<span class="number">5</span>)/<span class="number">10000</span></span><br><span class="line">&gt; P2 &lt;- sum(binsim==<span class="number">5</span>)/<span class="number">10000</span></span><br><span class="line">&gt; mean(binsim)</span><br><span class="line"><span class="string">[1]</span> <span class="number">6.0034</span></span><br><span class="line">&gt; var(binsim)</span><br><span class="line"><span class="string">[1]</span> <span class="number">4.141003</span></span><br><span class="line">&gt; quantile(binsim,<span class="number">0.95</span>)</span><br><span class="line"><span class="number">95</span>% </span><br><span class="line">  <span class="number">9</span> </span><br><span class="line">&gt; quantile(binsim,<span class="number">0.99</span>)</span><br><span class="line"><span class="number">99</span>% </span><br><span class="line"> <span class="number">11</span> </span><br></pre></td></tr></table></figure>
<h3 id="泊松随机变量"><a href="#泊松随机变量" class="headerlink" title="泊松随机变量"></a>泊松随机变量</h3><p>泊松分布也是一种离散型随机分布，这种分布具有参数 lamda ，这种分布具有很大的用途，通常使用在计数的模型中，用来计算在一段时间内某种事件发生的次数。例如在足球比赛中，某段时间内某个队伍的进球数。</p>
<p><strong>题目：</strong></p>
<p>假定平均每年发生车祸2.8次，请用泊松模型来模拟15年内，每年发生车祸的次数：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; rpois(<span class="number">15</span>,<span class="number">2.8</span>)</span><br><span class="line"><span class="string"> [1]</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">0</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>假定每辆轿车表面有1.2个瑕疵，请模拟20辆车总共有多少个表面瑕疵？</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; rpois(<span class="number">20</span>,<span class="number">1.2</span>)</span><br><span class="line"><span class="string"> [1]</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="指数分布随机变量"><a href="#指数分布随机变量" class="headerlink" title="指数分布随机变量"></a>指数分布随机变量</h3><p>指数分布随机变量是一种连续型的随机变量，经常被使用去模拟某种器械失效的时间。</p>
<p><strong>题目：</strong></p>
<p>模拟50000个参数为3的指数分布随机数。</p>
<ul>
<li>这些数据中，小于1的个数占比多少。与理论值比较</li>
<li>这些数据的平均数是多少，与理论值做比较</li>
<li>这个样本的方差是多少，与理论值做比较</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; mydata &lt;- rexp(<span class="number">50000</span>,<span class="number">3</span>)</span><br><span class="line">&gt; head(mydata)</span><br><span class="line"><span class="string">[1]</span> <span class="number">0.03311698</span> <span class="number">1.06162879</span> <span class="number">0.20924285</span> <span class="number">0.13179698</span> <span class="number">0.15026130</span> <span class="number">1.26152333</span></span><br><span class="line">&gt; p1 &lt;- sum(mydata&lt;<span class="number">1</span>)/<span class="number">50000</span></span><br><span class="line">&gt; p1</span><br><span class="line"><span class="string">[1]</span> <span class="number">0.9507</span></span><br><span class="line">&gt; pexp(<span class="number">1</span>,rate = <span class="number">3</span>)</span><br><span class="line"><span class="string">[1]</span> <span class="number">0.9502129</span></span><br><span class="line">&gt; mean(mydata)</span><br><span class="line"><span class="string">[1]</span> <span class="number">0.3319391</span></span><br><span class="line">&gt; var(mydata)</span><br><span class="line"><span class="string">[1]</span> <span class="number">0.1108731</span></span><br></pre></td></tr></table></figure>
<p>假设某种品牌的电池寿命符合平均值为55个小时的指数分布，用仿真模拟估算这种电池的平均寿命和方差并与理论值进行比较。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; a &lt;- rexp(<span class="number">10000</span>,<span class="number">1</span>/<span class="number">55</span>)</span><br><span class="line">&gt; mean(a)</span><br><span class="line"><span class="string">[1]</span> <span class="number">55.10442</span></span><br></pre></td></tr></table></figure>
<p>对于指数分布的相关概率分布函数 <code>xxexp( )</code> 函数中的参数 <code>rate</code> 为下面形式的概率密度函数的lamda 的值：</p>
<script type="math/tex; mode=display">
f(x) = \lambda {e^{ - \lambda x}}</script><p>所以对应的均值与方差为： </p>
<script type="math/tex; mode=display">
\left\{ \begin{array}{l}
mean = 1/rate\\
{\mathop{\rm var}}  = 1/rat{e^2}
\end{array} \right.</script><h3 id="正太分布的随机变量"><a href="#正太分布的随机变量" class="headerlink" title="正太分布的随机变量"></a>正太分布的随机变量</h3><p>正太分布是统计学上使用最广泛最基本的一种分布类型。</p>
<p><strong>题目：</strong></p>
<p>模拟100次均值为51，标准差为5.2的正太分布随机变量，估算这些仿真结果的方差与均值，并且与理论值进行比较</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; mydata &lt;- rnorm(<span class="number">100</span>,<span class="number">51</span>,<span class="number">5.2</span>)</span><br><span class="line">&gt; mean(mydata)</span><br><span class="line"><span class="string">[1]</span> <span class="number">51.55013</span></span><br><span class="line">&gt; var(mydata)</span><br><span class="line"><span class="string">[1]</span> <span class="number">27.42975</span></span><br></pre></td></tr></table></figure>
<p>模拟1000次标准正太分布随机变量z，然后用仿真结果做下面的计算：</p>
<ul>
<li>P(Z&gt;2.5)</li>
<li>P(0&lt;Z&lt;1.645)</li>
<li>P(1.2&lt;Z&lt;1.45)</li>
<li>P(-1.2&lt;Z&lt;1.3)</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; mydata &lt;- rnorm(<span class="number">1000</span>)</span><br><span class="line">&gt; P1 &lt;- sum(mydata&gt;<span class="number">2.5</span>)/<span class="number">1000</span></span><br><span class="line">&gt; P1</span><br><span class="line"><span class="string">[1]</span> <span class="number">0.005</span></span><br><span class="line">&gt; P2 &lt;- sum(mydata&lt;<span class="number">1.645</span>&amp;mydata&gt;<span class="number">0</span>)/<span class="number">1000</span></span><br><span class="line">&gt; P2</span><br><span class="line"><span class="string">[1]</span> <span class="number">0.458</span></span><br><span class="line">&gt; P3 &lt;- sum(mydata&lt;<span class="number">1.45</span>&amp;mydata&gt;<span class="number">1.2</span>)/<span class="number">1000</span></span><br><span class="line">&gt; P3</span><br><span class="line"><span class="string">[1]</span> <span class="number">0.038</span></span><br><span class="line">&gt; P4 &lt;- sum(mydata&lt;<span class="number">1.3</span>&amp;mydata&gt;<span class="number">-1.2</span>)/<span class="number">1000</span></span><br><span class="line">&gt; P4</span><br><span class="line"><span class="string">[1]</span> <span class="number">0.791</span></span><br></pre></td></tr></table></figure>
<h2 id="蒙特卡洛积分"><a href="#蒙特卡洛积分" class="headerlink" title="蒙特卡洛积分"></a>蒙特卡洛积分</h2><p>蒙特卡洛积分就是通过蒙特卡洛模拟的方式去计算函数的积分，依据的原理就是大数定理：</p>
<p>对于连续性随机变量 $X$ 服从在区间 [a,b] 概率密度为 $f(x)$ 的分布，所以随机变量的均值可以表示为：</p>
<script type="math/tex; mode=display">
E(X) = \int_a^b {xf(x)dx}</script><p>对于随机变量 Y ，Y为 $g(x)$ ，所以随机变量 Y 的均值为：</p>
<script type="math/tex; mode=display">
E(X) = \int_c^d {g(x)f(x)dx}</script><p>而根据大数定理，我们可以产生 M 个独立同分布（i.i.d) 的样本 X :</p>
<script type="math/tex; mode=display">
X_1,X_2,X_3,······X_M</script><p>当 M 的个数足够大时，样本的均值为：</p>
<script type="math/tex; mode=display">
\overline X  = (1/M)\sum</script><p>样本的均值依概率收敛于总体的均值 $E(X)$。</p>
<p>所以对于任意可积函数有下面的式子成立：</p>
<script type="math/tex; mode=display">
E[g(x)/f(x)] = \int {[g(x)/f(x)]f(x)dx} ......(1)</script><p>其中 $f(x)$ 可以算作随机变量 $x$ 的概率密度函数。</p>
<p>利用上面的方程 (1) 可以很方便的利用模拟的方法来计算函数的积分。</p>
<p><strong>题目：</strong></p>
<p>一、计算积分：</p>
<p>对于上面的积分可以写成：</p>
<script type="math/tex; mode=display">
\int_1^3 {[x^2/\frac{1}2]\frac{1}2dx}  = E[x^2/\frac{1}2]</script><p>所以上面的 积分的结果为：</p>
<script type="math/tex; mode=display">
2*E(x^2)</script><p>其中 $x$  服从在 [1,3] 上的均匀分布。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; mydata &lt;- runif(<span class="number">10000</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">&gt; mean(mydata^<span class="number">2</span>)*<span class="number">2</span></span><br><span class="line"><span class="string">[1]</span> <span class="number">8.703573</span></span><br></pre></td></tr></table></figure>
<p>二、计算积分：</p>
]]></content>
      <categories>
        <category>R语言</category>
        <category>统计应用</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>R语言的向量与矩阵</title>
    <url>//posts/0011/</url>
    <content><![CDATA[<h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><h2 id="建立向量"><a href="#建立向量" class="headerlink" title="建立向量"></a>建立向量</h2><p>在R语言中，建立向量的方式有很多，常见的方式有：</p>
<ul>
<li>使用 <code>c( )</code> 函数创建向量</li>
<li>使用 <code>：</code> 切片符创建数值型向量</li>
<li>使用 <code>seq( )</code> 函数创建向量序列</li>
<li>使用 <code>rep( )</code> 函数创建向量序列</li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">c</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>)</span><br><span class="line"><span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">1:<span class="number">5</span></span><br><span class="line">5:<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="产生规则序列"><a href="#产生规则序列" class="headerlink" title="产生规则序列"></a>产生规则序列</h3><p><strong><code>seq( )</code> 函数</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">seq(from = <span class="number">1</span>, to = <span class="number">1</span>, by = ((to - from)/(length.out - <span class="number">1</span>)),</span><br><span class="line">    length.out = <span class="literal">NULL</span>, along.with = <span class="literal">NULL</span>, ...)</span><br></pre></td></tr></table></figure>
<p><strong>例如：</strong></p>
<p>1、产生 1、3、5、7、9、11、13、15、17 的等差序列：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">seq(<span class="number">1</span>,<span class="number">17</span>,by=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>2、产生 1 到 100 之间等间距的20个数：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">se<span class="string">q(1,100,length.out = 20)</span></span><br></pre></td></tr></table></figure>
<p> <code>rep( )</code> 函数</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rep</span>(x, times = <span class="number">1</span>, length.out = <span class="literal">NA</span>, each = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><strong>例如：</strong></p>
<p>产生 1、2、2、3、3、3、4、4、4、4 的序列：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rep</span>(<span class="number">1</span>:<span class="number">4</span>,<span class="number">1</span>:<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>产生一个 1,0,2,0,0,3,0,0,0,4,0,0,0….100,0,,,,,,,,,0 的序列：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &lt;- numeric(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="selector-tag">i</span> <span class="keyword">in</span> <span class="number">1</span>:<span class="number">100</span>)&#123;</span><br><span class="line">  <span class="selector-tag">a</span> = c(<span class="selector-tag">a</span>,<span class="selector-tag">i</span>,rep(<span class="number">0</span>,i))</span><br><span class="line">&#125;</span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<h2 id="向量运算"><a href="#向量运算" class="headerlink" title="向量运算"></a>向量运算</h2><p>在R语言中可以对向量直接进行运算也可以将向量放入一个 expression 中进行运算。</p>
<blockquote><p>Vectors can be used in arithmetic expressions, in which case the operations are performed element by element. Vectors occurring in the same expression need not all be of the same length. If they are not, the value of the expression is a vector with the same length as the longest vector which occurs in the expression. Shorter vectors in the expression are recycled as often as need be (perhaps fractionally) until they match the length of the longest vector. In particular a constant is simply repeated. </p>
<footer><strong>R-introduction</strong></footer></blockquote>
<p><br></p>
<p><strong>例如：</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; x &lt;- <span class="built_in">c</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">&gt; y &lt;- <span class="built_in">c</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">&gt; z &lt;- <span class="number">2</span>+y</span><br><span class="line">&gt; z</span><br><span class="line">[<span class="number">1</span>] <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<h2 id="与向量有关的几个排序"><a href="#与向量有关的几个排序" class="headerlink" title="与向量有关的几个排序"></a>与向量有关的几个排序</h2><p>在R语言中，有三个很容易搞混的与排序有关的函数：</p>
<ul>
<li><code>sort( )</code> 函数</li>
<li><code>order( )</code> 函数</li>
<li><code>rank( )</code> 函数</li>
</ul>
<p>这三个函数作用在同一个向量中会给出不同的结果，但是这些结果都是与向量中的元素的额顺序有关：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; x &lt;- <span class="built_in">c</span>(<span class="number">2</span>,<span class="number">4</span>,<span class="number">32</span>,<span class="number">42</span>,<span class="number">5</span>,<span class="number">235</span>,<span class="number">23</span>)</span><br><span class="line">&gt; sort(x)</span><br><span class="line">[<span class="number">1</span>]   <span class="number">2</span>   <span class="number">4</span>   <span class="number">5</span>  <span class="number">23</span>  <span class="number">32</span>  <span class="number">42</span> <span class="number">235</span></span><br><span class="line">&gt; rank(x)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">3</span> <span class="number">7</span> <span class="number">4</span></span><br><span class="line">&gt; order(x)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">3</span> <span class="number">4</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p><code>sort ( )</code> 函数默认的是直接对向量中的元素进行排序，然后将排序的结果进行输出。</p>
<p><code>order( )</code> 函数是按照原始向量元素对应位置进行排序。</p>
<p><code>rank( )</code> 函数是向量的排秩。</p>
<h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><h2 id="矩阵的创建与基本操作"><a href="#矩阵的创建与基本操作" class="headerlink" title="矩阵的创建与基本操作"></a>矩阵的创建与基本操作</h2><h3 id="矩阵的创建"><a href="#矩阵的创建" class="headerlink" title="矩阵的创建"></a>矩阵的创建</h3><p><strong><code>matrix</code> 函数</strong></p>
<p>在R语言中，<strong>在某种程度上创建一个矩阵就是创建一个相应的向量，然后将向量中的数据往矩阵中填充，</strong>在R语言中，创建矩阵的基本函数是：<code>matrix( )</code> 函数</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">matrix</span><span class="params">(data, nrow , ncol, byrow = FALSE,dimnames)</span></span></span><br></pre></td></tr></table></figure>
<p><strong>例如：</strong></p>
<p>创建一个矩阵：</p>
<script type="math/tex; mode=display">\left( {\begin{array}{*{20}{c}}
{\rm{0}}&{\rm{1}}&{\rm{1}}\\
{\rm{1}}&{\rm{0}}&{\rm{1}}\\
{\rm{1}}&{\rm{1}}&{\rm{0}}
\end{array}} \right)\</script><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; vec &lt;- c(rep(rep(c(<span class="number">0</span>,<span class="number">1</span>),c(<span class="number">1</span>,<span class="number">3</span>)),<span class="number">2</span>),<span class="number">0</span>)</span><br><span class="line">&gt; matrix(vec,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="string">     [,1]</span> [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line"><span class="string">[1,]</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="string">[2,]</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="string">[3,]</span>    <span class="number">1</span>    <span class="number">1</span>    <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="矩阵的基本操作"><a href="#矩阵的基本操作" class="headerlink" title="矩阵的基本操作"></a>矩阵的基本操作</h3><p>在R语言中提供了一些对矩阵进行操作的特殊函数：</p>
<p><strong>对角矩阵：<code>diag( )</code> 函数</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">diag(x = <span class="number">1</span>, nrow, ncol, <span class="built_in">names</span> = <span class="literal">TRUE</span>)</span><br><span class="line">diag(x) &lt;- value</span><br></pre></td></tr></table></figure>
<p>这个函数有两种用法：</p>
<ul>
<li>创建一个<strong>对角矩阵</strong></li>
<li>索引一个方形矩阵的对角元素</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; diag(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,names = T)</span><br><span class="line"><span class="string">     [,1]</span> [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line"><span class="string">[1,]</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="string">[2,]</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span></span><br><span class="line"><span class="string">[3,]</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt; diag(matrix(<span class="number">1</span>:<span class="number">9</span>,<span class="number">3</span>,<span class="number">3</span>),names = T)</span><br><span class="line"><span class="string">[1]</span> <span class="number">1</span> <span class="number">5</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<p><strong>创建上下三角函数</strong></p>
<p> <code>upper.tri( )</code> 函数与 <code>lower.tri</code> 函数。</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">lower</span>.tri(x, diag = <span class="literal">FALSE</span>)</span><br><span class="line"><span class="built_in">upper</span>.tri(x, diag = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
<mark class="label [danger]">上面两个函数并不是直接提取出矩阵上下三角元素，而是输出的是一个由逻辑值构成的矩阵，在上下三角的位置为逻辑值 “TRUE”</mark> ；但是我们可以通过将这个逻辑值组成的矩阵作为 “index matrice” 给矩阵进行赋值。



<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; example(upper.tri)</span><br><span class="line"></span><br><span class="line">uppr.t&gt; (m2 &lt;- matrix(<span class="number">1</span>:<span class="number">20</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">5</span>    <span class="number">9</span>   <span class="number">13</span>   <span class="number">17</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">6</span>   <span class="number">10</span>   <span class="number">14</span>   <span class="number">18</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">3</span>    <span class="number">7</span>   <span class="number">11</span>   <span class="number">15</span>   <span class="number">19</span></span><br><span class="line">[<span class="number">4</span>,]    <span class="number">4</span>    <span class="number">8</span>   <span class="number">12</span>   <span class="number">16</span>   <span class="number">20</span></span><br><span class="line"></span><br><span class="line">uppr.t&gt; lower.tri(m2)</span><br><span class="line">      [,<span class="number">1</span>]  [,<span class="number">2</span>]  [,<span class="number">3</span>]  [,<span class="number">4</span>]  [,<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>,] <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line">[<span class="number">2</span>,]  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line">[<span class="number">3</span>,]  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line">[<span class="number">4</span>,]  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">uppr.t&gt; m2[lower.tri(m2)] &lt;- <span class="literal">NA</span></span><br><span class="line"></span><br><span class="line">uppr.t&gt; m2</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">5</span>    <span class="number">9</span>   <span class="number">13</span>   <span class="number">17</span></span><br><span class="line">[<span class="number">2</span>,]   <span class="literal">NA</span>    <span class="number">6</span>   <span class="number">10</span>   <span class="number">14</span>   <span class="number">18</span></span><br><span class="line">[<span class="number">3</span>,]   <span class="literal">NA</span>   <span class="literal">NA</span>   <span class="number">11</span>   <span class="number">15</span>   <span class="number">19</span></span><br><span class="line">[<span class="number">4</span>,]   <span class="literal">NA</span>   <span class="literal">NA</span>   <span class="literal">NA</span>   <span class="number">16</span>   <span class="number">20</span></span><br></pre></td></tr></table></figure>
<p><strong>矩阵的转置</strong></p>
<p>在 R 语言中 <code>t( )</code> 函数可以进行矩阵的转置：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; a &lt;- matrix(<span class="number">1</span>:<span class="number">9</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">&gt; a</span><br><span class="line"><span class="string">     [,1]</span> [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line"><span class="string">[1,]</span>    <span class="number">1</span>    <span class="number">4</span>    <span class="number">7</span></span><br><span class="line"><span class="string">[2,]</span>    <span class="number">2</span>    <span class="number">5</span>    <span class="number">8</span></span><br><span class="line"><span class="string">[3,]</span>    <span class="number">3</span>    <span class="number">6</span>    <span class="number">9</span></span><br><span class="line">&gt; t(a)</span><br><span class="line"><span class="string">     [,1]</span> [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line"><span class="string">[1,]</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="string">[2,]</span>    <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span></span><br><span class="line"><span class="string">[3,]</span>    <span class="number">7</span>    <span class="number">8</span>    <span class="number">9</span></span><br></pre></td></tr></table></figure>
<p><strong>矩阵的合并：</strong></p>
<p>在R语言中，<code>cbind( )</code> 函数与<code>rbind( )</code> 函数可以进行矩阵的合并，它们分别的作用是将矩阵进行横向合并与纵向合并。</p>
<p>对于 <code>cbind( )</code> 函数的使用应该在意：</p>
<div class="note info"><p>the arguments to cbind() must be either vectors of any length, or matrices with the same column size, that is the same number of rows. The result is a matrix with the concatenated arguments arg 1, arg 2, . . . forming the columns.</p>
<p>If some of the arguments to cbind() are vectors they may be shorter than the column size of any matrices present, in which case they are cyclically extended to match the matrix column size (or the length of the longest vector if no matrices are given).</p>
<p><strong>《R Introduction》</strong> </p>
</div>
<p>对于 <code>rbind( )</code> 函数来说同样是如此，只是改变了合并的方向。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; a &lt;- c(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">&gt; b &lt;- c(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">&gt; c &lt;- matrix(<span class="number">1</span>:<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">&gt; d &lt;- matrix(<span class="number">1</span>:<span class="number">9</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">&gt; cbind(a,b)</span><br><span class="line">     a b</span><br><span class="line"><span class="string">[1,]</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="string">[2,]</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="string">[3,]</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="string">[4,]</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line">Warning message:</span><br><span class="line">In cbind(a, b) :</span><br><span class="line">  number of rows of result <span class="keyword">is</span> <span class="keyword">not</span> a multiple of vector length (arg <span class="number">1</span>)</span><br><span class="line">&gt; cbind(a,c)</span><br><span class="line">     a    </span><br><span class="line"><span class="string">[1,]</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="string">[2,]</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line">Warning message:</span><br><span class="line">In cbind(a, c) :</span><br><span class="line">  number of rows of result <span class="keyword">is</span> <span class="keyword">not</span> a multiple of vector length (arg <span class="number">1</span>)</span><br><span class="line">&gt; cbind(a,d)</span><br><span class="line">     a      </span><br><span class="line"><span class="string">[1,]</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">7</span></span><br><span class="line"><span class="string">[2,]</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">8</span></span><br><span class="line"><span class="string">[3,]</span> <span class="number">4</span> <span class="number">3</span> <span class="number">6</span> <span class="number">9</span></span><br><span class="line">&gt; cbind(b,c)</span><br><span class="line">     b    </span><br><span class="line"><span class="string">[1,]</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="string">[2,]</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line">Warning message:</span><br><span class="line">In cbind(b, c) :</span><br><span class="line">  number of rows of result <span class="keyword">is</span> <span class="keyword">not</span> a multiple of vector length (arg <span class="number">1</span>)</span><br><span class="line">&gt; cbind(b,d)</span><br><span class="line">     b      </span><br><span class="line"><span class="string">[1,]</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">7</span></span><br><span class="line"><span class="string">[2,]</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">8</span></span><br><span class="line"><span class="string">[3,]</span> <span class="number">4</span> <span class="number">3</span> <span class="number">6</span> <span class="number">9</span></span><br><span class="line">Warning message:</span><br><span class="line">In cbind(b, d) :</span><br><span class="line">  number of rows of result <span class="keyword">is</span> <span class="keyword">not</span> a multiple of vector length (arg <span class="number">1</span>)</span><br><span class="line">&gt; cbind(c,d)</span><br><span class="line">Error <span class="keyword">in</span> cbind(c, d) : 矩阵的行数必需相符(见arg2)</span><br></pre></td></tr></table></figure>
<h2 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h2><p><strong>矩阵相乘：</strong></p>
<p>在R语言中可以通过使用操作符：<code>%*%</code> 来进行矩阵的乘法运算：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; a &lt;- matrix(<span class="number">1</span>:<span class="number">9</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">&gt; b &lt;- matrix(<span class="number">2</span>:<span class="number">10</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">&gt; a%*%b</span><br><span class="line"><span class="string">     [,1]</span> [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line"><span class="string">[1,]</span>   <span class="number">42</span>   <span class="number">78</span>  <span class="number">114</span></span><br><span class="line"><span class="string">[2,]</span>   <span class="number">51</span>   <span class="number">96</span>  <span class="number">141</span></span><br><span class="line"><span class="string">[3,]</span>   <span class="number">60</span>  <span class="number">114</span>  <span class="number">168</span></span><br></pre></td></tr></table></figure>
<p><strong>矩阵的特征根与特征向量</strong></p>
<p>在R语言中通过 <code>eigen</code> 函数求矩阵的特征跟与特征向量：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; a &lt;- matrix(<span class="number">1</span>:<span class="number">9</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">&gt; eigen(a)</span><br><span class="line">eigen() decomposition</span><br><span class="line">$values</span><br><span class="line"><span class="string">[1]</span>  <span class="number">1.611684e+01</span> <span class="number">-1.116844e+00</span> <span class="number">-5.700691e-16</span></span><br><span class="line"></span><br><span class="line">$vectors</span><br><span class="line"><span class="string">           [,1]</span>       [,<span class="number">2</span>]       [,<span class="number">3</span>]</span><br><span class="line"><span class="string">[1,]</span> <span class="number">-0.4645473</span> <span class="number">-0.8829060</span>  <span class="number">0.4082483</span></span><br><span class="line"><span class="string">[2,]</span> <span class="number">-0.5707955</span> <span class="number">-0.2395204</span> <span class="number">-0.8164966</span></span><br><span class="line"><span class="string">[3,]</span> <span class="number">-0.6770438</span>  <span class="number">0.4038651</span>  <span class="number">0.4082483</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="note danger"><p>从上面的输出结果可以看出，<code>eigen( )</code> 函数是以列表的形式输出结果，第一个 component 是矩阵的特征根向量，第二个 component 是矩阵的特征向量矩阵。</p>
</div>
<p><strong>矩阵的逆运算</strong></p>
<p>在R语言中可以通过 <code>solve( )</code> 函数来计算矩阵的逆：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; a &lt;- matrix(<span class="number">2</span>:<span class="number">10</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">&gt; solve(a)</span><br><span class="line">Error <span class="keyword">in</span> solve.<span class="keyword">default</span>(a) : </span><br><span class="line">  Lapack例行程序dgesv: 系统正好是奇异的: U[<span class="number">3</span>,<span class="number">3</span>] = <span class="number">0</span></span><br><span class="line">&gt; ?sample()</span><br><span class="line">&gt; b &lt;- matrix(sample(<span class="number">1</span>:<span class="number">100</span>,<span class="number">9</span>,replace = T),<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">&gt; b</span><br><span class="line"><span class="string">     [,1]</span> [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line"><span class="string">[1,]</span>   <span class="number">70</span>   <span class="number">67</span>   <span class="number">35</span></span><br><span class="line"><span class="string">[2,]</span>   <span class="number">24</span>    <span class="number">2</span>   <span class="number">98</span></span><br><span class="line"><span class="string">[3,]</span>   <span class="number">51</span>   <span class="number">90</span>   <span class="number">66</span></span><br><span class="line">&gt; solve(b)</span><br><span class="line"><span class="string">             [,1]</span>         [,<span class="number">2</span>]         [,<span class="number">3</span>]</span><br><span class="line"><span class="string">[1,]</span>  <span class="number">0.028263585</span>  <span class="number">0.004138039</span> <span class="number">-0.021132625</span></span><br><span class="line"><span class="string">[2,]</span> <span class="number">-0.011106340</span> <span class="number">-0.009222751</span>  <span class="number">0.019584114</span></span><br><span class="line"><span class="string">[3,]</span> <span class="number">-0.006695034</span>  <span class="number">0.009378904</span>  <span class="number">0.004775661</span></span><br></pre></td></tr></table></figure>
<mark class="label [danger]">第一个矩阵不可逆，是奇异矩阵，所以出现了报错。</mark>
<p><code>solve( )</code> 函数除了用来求矩阵的逆之外也可以非常的方便的来求线性方程的解：</p>
<p>例如：</p>
<script type="math/tex; mode=display">
{\rm{b = Aa}}</script><p>我们求上面的线性方程组的解可以通过下面的代码实现：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; b &lt;- c(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">&gt; A &lt;- matrix(sample(<span class="number">1</span>:<span class="number">50</span>,<span class="number">9</span>),<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">&gt; solve(A,b)</span><br><span class="line"><span class="string">[1]</span>  <span class="number">3.8461538</span> <span class="number">-2.8461538</span> <span class="number">-0.1538462</span></span><br></pre></td></tr></table></figure>
<p><strong>矩阵的奇异值分解</strong></p>
<p><blockquote class="quoteback" darkmode="" data-title="%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3_%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91" data-author="" cite="https://baike.baidu.com/item/%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3">
                      <a target="_blank" href="https://baike.baidu.com/item/%E5%A5%87%E5%BC%82%E5%80%BC" rel="noopener">奇异值</a>分解（Singular Value Decomposition）是<a target="_blank" href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/800" data-lemmaid="800" rel="noopener">线性代数</a>中一种重要的<a target="_blank" href="https://baike.baidu.com/item/%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3/4035386" data-lemmaid="4035386" rel="noopener">矩阵分解</a>，奇异值分解则是<a target="_blank" href="https://baike.baidu.com/item/%E7%89%B9%E5%BE%81%E5%88%86%E8%A7%A3/12522621" data-lemmaid="12522621" rel="noopener">特征分解</a>在任意矩阵上的推广。在<a target="_blank" href="https://baike.baidu.com/item/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/84717" data-lemmaid="84717" rel="noopener">信号处理</a>、<a target="_blank" href="https://baike.baidu.com/item/%E7%BB%9F%E8%AE%A1%E5%AD%A6/1175" data-lemmaid="1175" rel="noopener">统计学</a>等领域有重要应用
                      <footer> <cite><a href="https://baike.baidu.com/item/%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3">https://baike.baidu.com/item/%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3</a></cite></footer>
                      </blockquote><br>                      <script note="" src="https://cdn.jsdelivr.net/gh/Blogger-Peer-Review/quotebacks@1/quoteback.js"></script><br>在R语言中可以通过 <code>svd( )</code> 函数来计算奇异值分解：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; A</span><br><span class="line"><span class="string">     [,1]</span> [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line"><span class="string">[1,]</span>   <span class="number">30</span>   <span class="number">38</span>   <span class="number">34</span></span><br><span class="line"><span class="string">[2,]</span>   <span class="number">29</span>   <span class="number">37</span>   <span class="number">21</span></span><br><span class="line"><span class="string">[3,]</span>   <span class="number">18</span>   <span class="number">22</span>   <span class="number">17</span></span><br><span class="line">&gt; B &lt;- svd(A)</span><br><span class="line">&gt; B</span><br><span class="line">$d</span><br><span class="line"><span class="string">[1]</span> <span class="number">84.806555</span>  <span class="number">7.456859</span>  <span class="number">0.493366</span></span><br><span class="line"></span><br><span class="line">$u</span><br><span class="line"><span class="string">           [,1]</span>       [,<span class="number">2</span>]       [,<span class="number">3</span>]</span><br><span class="line"><span class="string">[1,]</span> <span class="number">-0.6952987</span>  <span class="number">0.6431331</span> <span class="number">-0.3208419</span></span><br><span class="line"><span class="string">[2,]</span> <span class="number">-0.6033833</span> <span class="number">-0.7648731</span> <span class="number">-0.2256052</span></span><br><span class="line"><span class="string">[3,]</span> <span class="number">-0.3904975</span>  <span class="number">0.0367277</span>  <span class="number">0.9198711</span></span><br><span class="line"></span><br><span class="line">$v</span><br><span class="line"><span class="string">           [,1]</span>       [,<span class="number">2</span>]        [,<span class="number">3</span>]</span><br><span class="line"><span class="string">[1,]</span> <span class="number">-0.5351713</span> <span class="number">-0.2985477</span>  <span class="number">0.79022845</span></span><br><span class="line"><span class="string">[2,]</span> <span class="number">-0.6760972</span> <span class="number">-0.4094535</span> <span class="number">-0.61256867</span></span><br><span class="line"><span class="string">[3,]</span> <span class="number">-0.5064427</span>  <span class="number">0.8621004</span> <span class="number">-0.01728049</span></span><br><span class="line"></span><br><span class="line">&gt; B$u %*% diag(B$d) %*% t(B$v)</span><br><span class="line"><span class="string">     [,1]</span> [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line"><span class="string">[1,]</span>   <span class="number">30</span>   <span class="number">38</span>   <span class="number">34</span></span><br><span class="line"><span class="string">[2,]</span>   <span class="number">29</span>   <span class="number">37</span>   <span class="number">21</span></span><br><span class="line"><span class="string">[3,]</span>   <span class="number">18</span>   <span class="number">22</span>   <span class="number">17</span></span><br></pre></td></tr></table></figure>
<p><strong>方阵的行列式</strong></p>
<p>对于一个方形矩阵，可以通过 <code>det( )</code> 函数求矩阵的行列式的值：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; A</span><br><span class="line"><span class="string">     [,1]</span> [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line"><span class="string">[1,]</span>   <span class="number">30</span>   <span class="number">38</span>   <span class="number">34</span></span><br><span class="line"><span class="string">[2,]</span>   <span class="number">29</span>   <span class="number">37</span>   <span class="number">21</span></span><br><span class="line"><span class="string">[3,]</span>   <span class="number">18</span>   <span class="number">22</span>   <span class="number">17</span></span><br><span class="line">&gt; det(A)</span><br><span class="line"><span class="string">[1]</span> <span class="number">-312</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>R语言</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>R语言</tag>
      </tags>
  </entry>
</search>
