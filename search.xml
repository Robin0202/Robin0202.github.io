<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>R语言中的条件与循环结构</title>
    <url>//posts/3/</url>
    <content><![CDATA[<p>编程语言的执行顺序一般都是从上到下依次执行，但是在日常使用的过程中我们要可能需要一些其他的语句执行顺序，如循环结构与条件结构。</p>
<a id="more"></a>

<h2 id="R语言里面的循环结构"><a href="#R语言里面的循环结构" class="headerlink" title="R语言里面的循环结构"></a>R语言里面的循环结构</h2><h3 id="1、for循环"><a href="#1、for循环" class="headerlink" title="1、for循环"></a>1、for循环</h3><p>for 可以重复执行语句，而且重复的次数是可以直接控制的。</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (variable <span class="keyword">in</span> <span class="built_in">vector</span>) &#123;</span><br><span class="line">  <span class="built_in">content</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable:为循环的参数</span><br><span class="line"><span class="built_in">vector</span>：为循环参数的取值</span><br><span class="line">在<span class="built_in">content</span>：输入要循环的语句</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>例如通过下面的语句输出斐波拉契数列的前三十个值</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">fseq &lt;- c(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">28</span>) &#123;</span><br><span class="line">  fseq[i+<span class="number">2</span>]=fseq[i]+fseq[i+<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">fseq</span><br></pre></td></tr></table></figure>

<h3 id="2、while循环"><a href="#2、while循环" class="headerlink" title="2、while循环"></a>2、while循环</h3><p>while 循环当给定条件为 TRUE 时就会一直循环直到判断条件为 FALSE，这种循环需要知道循环的条件。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">while</span><span class="params">(condition)</span></span>&#123;</span><br><span class="line">  如果条件满足则执行的语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如通过while循环来输出斐波拉契数列前三十个</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">fseq &lt;- c(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">28</span>)&#123;</span><br><span class="line">  fseq[i+<span class="number">2</span>] = fseq[i]+fseq[i+<span class="number">1</span>] </span><br><span class="line">  i=i+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fseq</span><br></pre></td></tr></table></figure>
<h3 id="3、repeat循环"><a href="#3、repeat循环" class="headerlink" title="3、repeat循环"></a>3、repeat循环</h3><p>repeat 循环会一直的执行语句，直到 break 之后循环停止。因此 repeat 循环经常与 break 语句连用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">repeat&#123;</span><br><span class="line">  content</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">condition</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的语句中一直执行 content 中的代码，直到满足条件 break。例如通过 repeat 循环去输出斐波拉契数列的前三十项</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">i=<span class="number">1</span></span><br><span class="line">fseq &lt;- c(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">repeat&#123;</span><br><span class="line">     fseq[i+<span class="number">2</span>] = fseq[i+<span class="number">1</span>]+fseq[i]</span><br><span class="line">     i=i+<span class="number">1</span></span><br><span class="line">     <span class="keyword">if</span>(i == <span class="number">29</span>)&#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="4、循环控制语句"><a href="#4、循环控制语句" class="headerlink" title="4、循环控制语句"></a>4、循环控制语句</h3><p><strong>break语句</strong></p>
<p>break 语句用于循环体中，作用是直接退出当前的循环体，执行循环下面的语句<strong>或者是执行外层的循环</strong>。例如上面的例子中，当 i 的取值等于29时，就停止 repeat 的循环。</p>
<p><strong>next语句</strong></p>
<p>这个语句和 break 语句有一些区别，它是跳过某次循环，执行下次循环，整个循环体还是在继续执行。例如一个字符串 <code>c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)</code> 。用循环语句依次输出每一个元素，但是跳过 b。</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">A = c(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>)</span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">(i in <span class="number">1</span>:<span class="number">3</span>)</span>&#123;</span></span><br><span class="line"><span class="function">  <span class="title">if</span><span class="params">(A[i] == <span class="string">&quot;b&quot;</span>)</span> <span class="title">next</span></span></span><br><span class="line"><span class="function">  <span class="title">print</span><span class="params">(A[i])</span> </span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="R语言里面的条件结构"><a href="#R语言里面的条件结构" class="headerlink" title="R语言里面的条件结构"></a>R语言里面的条件结构</h2><h3 id="1、if条件结构"><a href="#1、if条件结构" class="headerlink" title="1、if条件结构"></a>1、if条件结构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>(<span class="params">expression</span>)</span>&#123;</span><br><span class="line">  若expression为<span class="literal">true</span>则执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如下面的例子，判断数是否大于5</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">x</span> &lt;- <span class="number">6</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="variable">x</span>&gt;<span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="function">  <span class="title">print</span>(<span class="string">&quot;x is greater than 5&quot;</span>)</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、if-else-条件结构"><a href="#2、if-else-条件结构" class="headerlink" title="2、if-else 条件结构"></a>2、if-else 条件结构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>(<span class="params">expression</span>)</span>&#123;</span><br><span class="line">  若expression为<span class="literal">true</span>则执行</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  若expression为<span class="literal">false</span>则执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如同样的例子：</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">x</span> &lt;-<span class="number">4</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="variable">x</span>&gt;<span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="function">  <span class="title">print</span>(<span class="string">&quot;x is greater than 5&quot;</span>)</span></span><br><span class="line">&#125; <span class="variable"><span class="keyword">else</span></span> &#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="string">&quot;x is not greater than 5&quot;</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的结构中会先去判断 if 后面的条件，如果不满足则执行 else 语句后面的代码。</p>
]]></content>
      <categories>
        <category>R语言</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>R语言</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Rvest的爬虫</title>
    <url>//posts/rvest/</url>
    <content><![CDATA[<img data-src="http://ww1.sinaimg.cn/large/007DtFxUly1gk9qsre6j9j306o07qmxq.jpg" width="20%" height="20%" title="◎ rvest" alt="rvest"/>



<a id="more"></a>

<h2 id="关于rvest包"><a href="#关于rvest包" class="headerlink" title="关于rvest包"></a>关于rvest包</h2><p><code>rvest</code> 包是Hadley Wickham开发的一个能够非常容易的从网页获取数据的包，这个包使用起来非常的容易，<code>rvest</code>的灵感来源于<code>BeautifulSoup</code>（<code>python</code>中的一个非常有名的解析库）。</p>
<p>但是我的理解是这个包实际上不能直接从网络中获取<code>HTML</code>文件，而是通过<code>xml2</code> 包中的<code>read_html()</code> 获取<code>HTML</code>文件或者是通过其他的方式获取了<code>html</code>文件之后再转给<code>rvest</code>，用<code>rvest</code>包中的函数来非常方便的去提取数据。加载<code>rvest</code>的同时也会加载<code>xml2</code>包。</p>
<p><code>read_html()</code> 函数：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">read_html(x, encoding = <span class="string">&quot;&quot;</span>, ..., options = <span class="built_in">c</span>(<span class="string">&quot;RECOVER&quot;</span>, <span class="string">&quot;NOERROR&quot;</span>, <span class="string">&quot;NOBLANKS&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个函数可以从互联网中获取网页内容，x为网页的URL，encoding是指定网页的编码方式。</span></span><br></pre></td></tr></table></figure>

<p>这个函数获取<code>html</code>文件的功能是非常的有限的，因为他没有伪装，无法获取动态网页的全部内容，有些网页中存在异步加载，文件中包含js脚本，浏览器可以通过加载js脚本去更新数据，但是用R这种方式获取<code>html</code>文件是无法获取所有的内容的。必须要使用<code>rselenium</code>包通过虚拟浏览器的方式去进行获取。</p>
<p><code>rvest</code>包中存在下面这些函数：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">back	History navigation tools</span><br><span class="line">encoding	Guess and repair faulty character encoding.</span><br><span class="line">follow_link	Navigate to a new url.</span><br><span class="line">google_form	Make link to google form given id</span><br><span class="line">guess_encoding	Guess and repair faulty character encoding.</span><br><span class="line">html	Parse an HTML page.</span><br><span class="line">html_attr	Extract attributes, text and tag name from html.</span><br><span class="line">html_attrs	Extract attributes, text and tag name from html.</span><br><span class="line">html_children	Extract attributes, text and tag name from html.</span><br><span class="line">html_form	Parse forms <span class="keyword">in</span> a page.</span><br><span class="line">html_name	Extract attributes, text and tag name from html.</span><br><span class="line">html_node	Select nodes from an HTML document</span><br><span class="line">html_nodes	Select nodes from an HTML document</span><br><span class="line">html_session	Simulate a session <span class="keyword">in</span> an html browser.</span><br><span class="line">html_table	Parse an html table into a data frame.</span><br><span class="line">html_text	Extract attributes, text and tag name from html.</span><br><span class="line">is.session	Simulate a session <span class="keyword">in</span> an html browser.</span><br><span class="line">jump_to	Navigate to a new url.</span><br><span class="line">pluck	Extract elements of a <span class="built_in">list</span> by position.</span><br><span class="line">read_xml.session	Parse an HTML page.</span><br><span class="line">repair_encoding	Guess and repair faulty character encoding.</span><br><span class="line">session_history	History navigation tools</span><br><span class="line">set_values	Set values <span class="keyword">in</span> a form.</span><br><span class="line">submit_form	Submit a form back to the server.</span><br></pre></td></tr></table></figure>

<p><code>rvest</code>包中经常使用的有下面几个：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">html_nodes(x, css, xpath)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个函数用于从html文件中去定位到需要的内容的节点的位置；</span></span><br><span class="line"><span class="comment">#定位的方式有两种一种是通过xpath定位一种是通过css进行定位</span></span><br><span class="line"></span><br><span class="line">html_node(x, css, xpath)</span><br><span class="line"></span><br><span class="line"><span class="comment">#只是输出一个元素</span></span><br><span class="line">----</span><br><span class="line">html_text(x, trim = <span class="literal">FALSE</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个包用来获取html文件中的文本数据。x是定位到的文本所在的节点；trim参数可以去掉文本前后的空格</span></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">html_table(x, header = <span class="literal">NA</span>, trim = <span class="literal">TRUE</span>, fill = <span class="literal">FALSE</span>, dec = <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个函数用来读取网页中的表格，转化为数据框</span></span><br><span class="line"><span class="comment">#x：一个html文件、或者是一个节点、节点集。 </span></span><br><span class="line"><span class="comment">#header：是否将第一行设为表头？如果为NA，则默认的是当含有&lt;th&gt;标签时，将以第一行作为表头。</span></span><br><span class="line"><span class="comment">#trim：去掉内容中前后的空格</span></span><br><span class="line"><span class="comment">#fill：缺失值是否自动填充</span></span><br><span class="line"><span class="comment">#dec：转化为十进制</span></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">html_attr(x, name, default = <span class="literal">NA_character_</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取属性内容，x是节点，name获取节点中哪个属性的值。</span></span><br></pre></td></tr></table></figure>

<h2 id="数据爬取步骤"><a href="#数据爬取步骤" class="headerlink" title="数据爬取步骤"></a>数据爬取步骤</h2><p><code>rvest</code>爬取数据的步骤非常的简单，一般来说是三步：</p>
<ol>
<li>读取网页：借助<code>read_html()</code>函数去读取网页</li>
<li>爬取内容：从读取下来的网页中获取想要的内容：<ol>
<li>定位：从html节点文件中找到目标数据的位置，用<code>html_nodes()</code> 读取节点</li>
<li>解析，获取数据：用html_text()等函数获取定位到的节点的数据。</li>
</ol>
</li>
</ol>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#爬取静态网站pubmed示例</span></span><br><span class="line"><span class="comment">#调用包</span></span><br><span class="line">library(<span class="string">&quot;rvest&quot;</span>)</span><br><span class="line"><span class="comment">#第一步、读取网页。</span></span><br><span class="line">page_content &lt;- read_html( x= <span class="string">&quot;&lt;http://www.stats.gov.cn/tjsj/zxfb/202010/t20201027_1796416.html&gt;&quot;</span> )</span><br><span class="line"><span class="comment">#第二步、爬取内容。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.1、定位</span></span><br><span class="line"><span class="comment">#xpath:使用xpat定位</span></span><br><span class="line"><span class="comment">#css：优点：简洁 缺点：定位可能不精确。</span></span><br><span class="line">node &lt;- <span class="string">&#x27;//*[@id=&quot;search-results&quot;]/section/div[1]/div/article[1]/div[2]/div[1]/a&#x27;</span></span><br><span class="line">nodes_content &lt;- html_nodes(x = page_content,xpath = node)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.2、爬起数据</span></span><br><span class="line">html_text(x = nodes_content,trim = <span class="built_in">T</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://pubmed.ncbi.nlm.nih.gov/">PubMed</a> 是一个免费的搜索引擎，提供生物医学方面的论文搜索以及摘要。</p>
<p>上面用的是<code>xpath</code> 进行定位，也可以使用<code>css</code>进行定位；这两种定位各有各的优缺点。</p>
<h3 id="xpath定位"><a href="#xpath定位" class="headerlink" title="xpath定位"></a>xpath定位</h3><p><code>xpath</code>简单的来说是直接通过路径来进行定位，如：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">//*[@id=<span class="string">&quot;search-results&quot;</span>]/section/div[<span class="number">1</span>]/div/article[<span class="number">1</span>]/div[<span class="number">2</span>]/div[<span class="number">1</span>]/a</span><br></pre></td></tr></table></figure>

<p>这种形式就类似于我们文件夹中的路径，有两种路径：</p>
<ol>
<li>绝对路径：路径以<code>/</code>符号分隔，非常精确的定位到节点所在的位置</li>
<li>相对路径：路径中用<code>//</code> 来进行表示相对的路径</li>
</ol>
<p>例如有两个小区，每个小区两栋楼一单元与二单元，每一栋楼有五层。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">一号小区/一单元/二楼  </span><br><span class="line"><span class="comment">#绝对定位，一号小区一单元二楼</span></span><br><span class="line"></span><br><span class="line">一号小区//二楼</span><br><span class="line"><span class="comment">#采用了相对路径，一号小区所有的二楼，既包括一单元的也包括二单元的二楼</span></span><br><span class="line"></span><br><span class="line">//二楼</span><br><span class="line"><span class="comment">#相对路径，各个小区各个单元的二楼</span></span><br></pre></td></tr></table></figure>

<p>在谷歌浏览器中可以直接在浏览器中检查源代码（F12），定位到节点复制xpath地址，使用起来非常的简单。</p>
]]></content>
      <categories>
        <category>R语言</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>R语言数据创建与导入</title>
    <url>//posts/1/</url>
    <content><![CDATA[<img data-src="http://ww1.sinaimg.cn/large/007DtFxUly1gkangqreppj307305i3ye.jpg" width="20%" height="20%" title=" " alt=""/>



<a id="more"></a>

<h2 id="创建数据集"><a href="#创建数据集" class="headerlink" title="创建数据集"></a>创建数据集</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><strong>向量：</strong></p>
<p>存储同一类型的数据，可以是<strong>数值型</strong>、<strong>字符串型</strong>、也可以是<strong>布尔型</strong>的。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a &lt;- <span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">b &lt;- <span class="built_in">c</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>)</span><br><span class="line"><span class="built_in">c</span> &lt;- <span class="built_in">c</span>(<span class="literal">FALSE</span>,<span class="literal">FALSE</span>,<span class="literal">TRUE</span>,<span class="literal">TRUE</span>,<span class="literal">FALSE</span>)</span><br><span class="line"></span><br><span class="line">------ 向量的创建</span><br><span class="line"></span><br><span class="line">&gt; a[<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span></span><br><span class="line">&gt; a[<span class="number">2</span>:<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span> <span class="number">3</span></span><br><span class="line">&gt; a[<span class="built_in">c</span>(<span class="built_in">T</span>,<span class="built_in">T</span>,<span class="built_in">F</span>,<span class="built_in">F</span>,<span class="built_in">F</span>)]</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">------ 向量数据的提取</span><br></pre></td></tr></table></figure>

<p>在R语言种存在标量一词，标量其实就是只是包含一个元素的向量，如 <code>a &lt; - 2</code> 这时 <code>a</code> 是一个标量。</p>
<p><strong>矩阵：</strong></p>
<p>矩阵是一个二维数组，且必须存同一个数据类型数值型或者是字符串型等。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mymatrix &lt;- matrix(vector,nrow,ncol,byrow=<span class="literal">FALSE</span>,dimnames=<span class="built_in">list</span>(Char_vector_rownames,Char_vector_colnames)</span><br><span class="line"></span><br><span class="line">vector:数据向量</span><br><span class="line">nrow ：行数</span><br><span class="line">ncol ：列数</span><br><span class="line">byrow ：在矩阵默认是按照列对数据进行填充的。</span><br><span class="line">dimnames ：对矩阵修改行列名</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line">a &lt;- matrix(<span class="number">1</span>:<span class="number">20</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">a</span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">5</span>    <span class="number">9</span>   <span class="number">13</span>   <span class="number">17</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">6</span>   <span class="number">10</span>   <span class="number">14</span>   <span class="number">18</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">3</span>    <span class="number">7</span>   <span class="number">11</span>   <span class="number">15</span>   <span class="number">19</span></span><br><span class="line">[<span class="number">4</span>,]    <span class="number">4</span>    <span class="number">8</span>   <span class="number">12</span>   <span class="number">16</span>   <span class="number">20</span></span><br><span class="line"></span><br><span class="line">----- 创建矩阵默认按列对数据进行填充。</span><br><span class="line"></span><br><span class="line">b &lt;- matrix(<span class="number">1</span>:<span class="number">20</span>,<span class="number">4</span>,<span class="number">5</span>,byrow=<span class="built_in">T</span>)</span><br><span class="line">b</span><br><span class="line">      [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">6</span>    <span class="number">7</span>    <span class="number">8</span>    <span class="number">9</span>   <span class="number">10</span></span><br><span class="line">[<span class="number">3</span>,]   <span class="number">11</span>   <span class="number">12</span>   <span class="number">13</span>   <span class="number">14</span>   <span class="number">15</span></span><br><span class="line">[<span class="number">4</span>,]   <span class="number">16</span>   <span class="number">17</span>   <span class="number">18</span>   <span class="number">19</span>   <span class="number">20</span></span><br><span class="line"></span><br><span class="line">----- 创建按照列进行填行进行填充的数据。</span><br><span class="line"></span><br><span class="line">a &lt;- <span class="built_in">c</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>)</span><br><span class="line">b &lt;- <span class="built_in">c</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>)</span><br><span class="line"><span class="built_in">c</span> &lt;- matrix(<span class="number">1</span>:<span class="number">20</span>,<span class="number">5</span>,<span class="number">4</span>,byrow=<span class="built_in">T</span>,dimnames=<span class="built_in">list</span>(a,b))</span><br><span class="line"><span class="built_in">c</span></span><br><span class="line">   a  b  <span class="built_in">c</span>  d</span><br><span class="line">a  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">b  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line"><span class="built_in">c</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span></span><br><span class="line">d <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span></span><br><span class="line">e <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">----- 通过dimnames参数对矩阵的行与列命名。</span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">c</span>[<span class="number">1</span>:<span class="number">8</span>]</span><br><span class="line">[<span class="number">1</span>]  <span class="number">1</span>  <span class="number">5</span>  <span class="number">9</span> <span class="number">13</span> <span class="number">17</span>  <span class="number">2</span>  <span class="number">6</span> <span class="number">10</span></span><br><span class="line">&gt; <span class="built_in">c</span>[<span class="number">1</span>,]</span><br><span class="line">a b <span class="built_in">c</span> d </span><br><span class="line">1 <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line">&gt; <span class="built_in">c</span>[,<span class="number">1</span>]</span><br><span class="line"> a  b  <span class="built_in">c</span>  d  e </span><br><span class="line"> <span class="number">1</span>  <span class="number">5</span>  <span class="number">9</span> <span class="number">13</span> <span class="number">17</span></span><br><span class="line"></span><br><span class="line">矩阵数据的提取。同样默认是按照列进行数据提取的。</span><br></pre></td></tr></table></figure>

<p><strong>数组：</strong></p>
<p>数组是一个多维的数据矩阵，维度可以大于二，存储同一数据类型。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">myarray &lt;- array(vector,dimensions,dimnames)</span><br><span class="line"></span><br><span class="line">vector : 数据向量</span><br><span class="line">dimensions : 数组的维度</span><br><span class="line">dimnames : 为各个维度命名，必须为字符串类型。</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">dim1 &lt;- <span class="built_in">c</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">dim2 &lt;- <span class="built_in">c</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">dim3 &lt;- <span class="built_in">c</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line">myarray &lt;- array(<span class="number">1</span>:<span class="number">24</span>,<span class="built_in">c</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),dimnames = <span class="built_in">list</span>(dim1,dim2,dim3))</span><br><span class="line">myarray</span><br><span class="line"></span><br><span class="line">, , <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">1 <span class="number">1</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line">2 <span class="number">2</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line">, , <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">1 <span class="number">7</span>  <span class="number">9</span> <span class="number">11</span></span><br><span class="line">2 <span class="number">8</span> <span class="number">10</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line">, , <span class="number">3</span></span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">1 <span class="number">13</span> <span class="number">15</span> <span class="number">17</span></span><br><span class="line">2 <span class="number">14</span> <span class="number">16</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line">, , <span class="number">4</span></span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">1 <span class="number">19</span> <span class="number">21</span> <span class="number">23</span></span><br><span class="line">2 <span class="number">20</span> <span class="number">22</span> <span class="number">24</span></span><br><span class="line"></span><br><span class="line">----- 上面创建的就是一个两行三列四维的数组。</span><br><span class="line"></span><br><span class="line">myarray[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>] <span class="number">15</span></span><br><span class="line"></span><br><span class="line">----- 提取数组中第三个维度中的第一行第二列的数据</span><br><span class="line"></span><br><span class="line">myarray[<span class="number">1</span>,<span class="number">2</span>,]</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span> </span><br><span class="line"> <span class="number">3</span>  <span class="number">9</span> <span class="number">15</span> <span class="number">21</span></span><br><span class="line"></span><br><span class="line">----- 提取数据中各个维度中的第一行，第二列的数据</span><br><span class="line"></span><br><span class="line">myarray[<span class="number">1</span>,,<span class="number">3</span>]</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span> </span><br><span class="line"> <span class="number">13</span> <span class="number">15</span> <span class="number">17</span></span><br><span class="line"></span><br><span class="line">----- 提取第三维度，第一行所有的数据</span><br><span class="line"></span><br><span class="line">myarray[,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span> </span><br><span class="line">15 <span class="number">16</span></span><br><span class="line"></span><br><span class="line">----- 提取第三维度第二列的所有数据</span><br><span class="line"></span><br><span class="line">myarray[<span class="number">1</span>,,] </span><br><span class="line">  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">1 <span class="number">1</span>  <span class="number">7</span> <span class="number">13</span> <span class="number">19</span></span><br><span class="line">2 <span class="number">3</span>  <span class="number">9</span> <span class="number">15</span> <span class="number">21</span></span><br><span class="line">3 <span class="number">5</span> <span class="number">11</span> <span class="number">17</span> <span class="number">23</span></span><br><span class="line"></span><br><span class="line">----- 提取各个维度第一行的数据。</span><br></pre></td></tr></table></figure>

<p><strong>数据框：</strong></p>
<p>数据框是使用最多的一种数据结构，形式上与矩阵相似，但是这种数据结构可以存储不同的数据类型的数据。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mydata &lt;- data.frame(col1,clo2,col3,,,,,row.names,,)</span><br><span class="line"></span><br><span class="line">col1 : 第一列数据</span><br><span class="line">col2 ： 第二列数据</span><br><span class="line">......</span><br><span class="line">row.names ： 行名向量。</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">name &lt;- <span class="built_in">c</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>)</span><br><span class="line">age &lt;- <span class="built_in">c</span>(<span class="number">12</span>,<span class="number">13</span>,<span class="number">13</span>,<span class="number">14</span>)</span><br><span class="line">classlevel &lt;- <span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">ismale &lt;- <span class="built_in">c</span>(<span class="built_in">T</span>,<span class="built_in">T</span>,<span class="built_in">F</span>,<span class="built_in">F</span>)</span><br><span class="line">mydata &lt;- data.frame(name,age,classlevel,ismale)</span><br><span class="line">mydata</span><br><span class="line"></span><br><span class="line">   name age classlevel ismale</span><br><span class="line">1    a  <span class="number">12</span>          <span class="number">1</span>   <span class="literal">TRUE</span></span><br><span class="line">2    b  <span class="number">13</span>          <span class="number">2</span>   <span class="literal">TRUE</span></span><br><span class="line">3    <span class="built_in">c</span>  <span class="number">13</span>          <span class="number">2</span>  <span class="literal">FALSE</span></span><br><span class="line">4    d  <span class="number">14</span>          <span class="number">3</span>  <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">----- 创建矩阵</span><br><span class="line"></span><br><span class="line">mydata[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"></span><br><span class="line">----- 提取矩阵中第一行第二列的数据</span><br><span class="line"></span><br><span class="line">mydata[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line">   name age</span><br><span class="line">1    a  <span class="number">12</span></span><br><span class="line">2    b  <span class="number">13</span></span><br><span class="line">3    <span class="built_in">c</span>  <span class="number">13</span></span><br><span class="line">4    d  <span class="number">14</span></span><br><span class="line"></span><br><span class="line">----- 提取矩阵前两列的数据</span><br><span class="line"></span><br><span class="line">mydata[<span class="built_in">c</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)]</span><br><span class="line">   name age</span><br><span class="line">1    a  <span class="number">12</span></span><br><span class="line">2    b  <span class="number">13</span></span><br><span class="line">3    <span class="built_in">c</span>  <span class="number">13</span></span><br><span class="line">4    d  <span class="number">14</span></span><br><span class="line"></span><br><span class="line">----- 提取矩阵列命为name与age的两列</span><br><span class="line"></span><br><span class="line">mydata$age</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span> <span class="number">13</span> <span class="number">13</span> <span class="number">14</span></span><br><span class="line"></span><br><span class="line">----- 提取矩阵age这一列，在矩阵中$符号可以用来提取特定的列。</span><br></pre></td></tr></table></figure>

<p>与矩阵有关的几个函数：<code>attach()</code> , <code>detach()</code> , <code>with()</code> .</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">attach()</span><br><span class="line"></span><br><span class="line">&gt; attach(mydata)</span><br><span class="line">The following objects are masked _by_ .GlobalEnv:</span><br><span class="line"></span><br><span class="line">    age, classlevel, ismale, name</span><br><span class="line"></span><br><span class="line">&gt; age</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span> <span class="number">13</span> <span class="number">13</span> <span class="number">14</span></span><br><span class="line">&gt; <span class="built_in">c</span>(age,name)</span><br><span class="line">[<span class="number">1</span>] <span class="string">&quot;12&quot;</span> <span class="string">&quot;13&quot;</span> <span class="string">&quot;13&quot;</span> <span class="string">&quot;14&quot;</span> <span class="string">&quot;a&quot;</span>  <span class="string">&quot;b&quot;</span>  <span class="string">&quot;c&quot;</span>  <span class="string">&quot;d&quot;</span></span><br><span class="line"></span><br><span class="line">----- 通过attach()函数可以将数据框放在搜索路径中，这时可以直接通过列名去调取数据框中的数据，而不用$等符号，R会主动首先搜索attach的数据框。</span><br><span class="line"></span><br><span class="line">&gt; age &lt;- <span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">&gt; attach(mydata)</span><br><span class="line">The following objects are masked _by_ .GlobalEnv:</span><br><span class="line"></span><br><span class="line">    age, classlevel, ismale, name</span><br><span class="line"></span><br><span class="line">The following objects are masked from mydata (pos = <span class="number">3</span>):</span><br><span class="line"></span><br><span class="line">    age, classlevel, ismale, name</span><br><span class="line"></span><br><span class="line">&gt; age</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">----- 从上面的例子我们可以看到，这种attach()将数据加到搜索路径中的方法存在一些缺点，</span><br><span class="line">      就是如果先前存在数据框中的同名变量，这时原先的变量将取得优先权。所有上面age输出的不是数据框中的数据。</span><br><span class="line"></span><br><span class="line">detach()</span><br><span class="line"></span><br><span class="line">----- 通过这个函数可以将数据框从搜索路径中移除。</span><br><span class="line"></span><br><span class="line">with()</span><br><span class="line"></span><br><span class="line">&gt; age &lt;- <span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">&gt; with(mydata,age)</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span> <span class="number">13</span> <span class="number">13</span> <span class="number">14</span></span><br><span class="line"></span><br><span class="line">----- 由于上面attach存在的一些缺点，我们可以看到通过with函数可以得到解决，这个函数将运算集中在数据框中。</span><br></pre></td></tr></table></figure>

<p><strong>因子：</strong></p>
<p>因子是数据结构在统计中是一个非常有用的概念，这种变量对于定序变量与定类变量非常有用，费别可以用有序因子和无须因子表示。在R中是通过factor() 函数创建因子，这个函数其实是以一个整数向量的形式存储类别值，同时用一个字符串（原始值）的向量映射到这个整数向量中。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">factor(x,levels,labels=levels，ordered=<span class="literal">FALSE</span>)</span><br><span class="line"></span><br><span class="line">x : 字符串向量</span><br><span class="line">levels ：指定因子的水平</span><br><span class="line">labels : 为每个水平定义一个值标签</span><br><span class="line">ordered ： 是否是有序因子（如果不给的level则会按照英文字母去给定序）</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">fruit &lt;- <span class="built_in">c</span>(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;strawberry&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;watermelon&quot;</span>,<span class="string">&quot;grape&quot;</span>)</span><br><span class="line">factor(fruit)</span><br><span class="line">[<span class="number">1</span>] apple      orange     strawberry banana     watermelon grape     </span><br><span class="line">Levels: apple banana grape orange strawberry watermelon</span><br><span class="line"></span><br><span class="line">----- 上面创建的是一个无序因子，默认按照字母的顺序排列。</span><br><span class="line"></span><br><span class="line">fruit &lt;- <span class="built_in">c</span>(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;strawberry&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;watermelon&quot;</span>,<span class="string">&quot;grape&quot;</span>)</span><br><span class="line">factor(fruit,ordered=<span class="literal">TRUE</span>)</span><br><span class="line">[<span class="number">1</span>] apple      orange     strawberry banana     watermelon grape     </span><br><span class="line">6 Levels: apple &lt; banana &lt; grape &lt; orange &lt; ... &lt; watermelon</span><br><span class="line"></span><br><span class="line">----- 上面创建的是一个有序的因子。同样默认是按照首字母的顺序排列的。</span><br><span class="line"></span><br><span class="line">fruit &lt;- <span class="built_in">c</span>(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;strawberry&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;watermelon&quot;</span>,<span class="string">&quot;grape&quot;</span>)</span><br><span class="line">factor(fruit,ordered=<span class="literal">TRUE</span>,level=<span class="built_in">c</span>(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;strawberry&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;watermelon&quot;</span>,<span class="string">&quot;grape&quot;</span>,<span class="string">&quot;orange&quot;</span>))</span><br><span class="line">[<span class="number">1</span>] apple      orange     strawberry banana     watermelon grape     </span><br><span class="line">6 Levels: apple &lt; strawberry &lt; banana &lt; watermelon &lt; ... &lt; orange</span><br><span class="line"></span><br><span class="line">----- 上面创建的因子是一个有序因子我们自己通过level给定了因子的序。</span><br><span class="line"></span><br><span class="line">factor(fruit,ordered=<span class="literal">TRUE</span>,level=<span class="built_in">c</span>(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;strawberry&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;watermelon&quot;</span>,<span class="string">&quot;grape&quot;</span>,<span class="string">&quot;orange&quot;</span>),labels=<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">Levels: <span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span> &lt; <span class="number">4</span> &lt; <span class="number">5</span> &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line">----- 上面同样是一个有序的因子，我们通过给定了自己的序，且给每一种水果一个值标签，<span class="number">1</span> 表示apple等</span><br></pre></td></tr></table></figure>

<p><strong>列表：</strong></p>
<p>列表是另外一种数据结构，这是R中最复杂的一种数据结构，在列表中可以存放各种R对象，可以是列表，矩阵，数据框等。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mylist &lt;- <span class="built_in">list</span>(object1,object2,object3,,,,,)llllll</span><br><span class="line"></span><br><span class="line">object : 都是列表中的对象</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">a &lt;- <span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">b &lt;- matrix(<span class="number">1</span>:<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">c</span> &lt;- data.frame(<span class="number">1</span>:<span class="number">3</span>,<span class="built_in">c</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>))</span><br><span class="line">mylist &lt;- <span class="built_in">list</span>(name=a,b,<span class="built_in">c</span>)</span><br><span class="line">mylist</span><br><span class="line"></span><br><span class="line">$name</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">2</span>]]</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">3</span>    <span class="number">5</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">4</span>    <span class="number">6</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">3</span>]]</span><br><span class="line">  name1 name2</span><br><span class="line">1     <span class="number">1</span>     a</span><br><span class="line">2     <span class="number">2</span>     b</span><br><span class="line">3     <span class="number">3</span>     <span class="built_in">c</span></span><br><span class="line"></span><br><span class="line">----- 上面创建一个列表，这个列表中包括一个向量，一个矩阵，一个数据框三种数据结构。在列表中可以通过 name= 来对每一个对象命名。</span><br><span class="line"></span><br><span class="line">&gt; mylist[[<span class="number">2</span>]]</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">3</span>    <span class="number">5</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">4</span>    <span class="number">6</span></span><br><span class="line"></span><br><span class="line">&gt; mylist[[<span class="string">&quot;name&quot;</span>]]</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">----- 列表中数据的提取。</span><br></pre></td></tr></table></figure>

<p>列表是R中非常重要的一个数据结构，在R中许多函数的输出结果是以列表的形式给出的。</p>
<hr>
<h2 id="数据的输入"><a href="#数据的输入" class="headerlink" title="数据的输入"></a>数据的输入</h2> <iframe id="embed_dom" name="embed_dom" frameborder="0" style="display:block;width:525px; height:245px;" src="https://www.processon.com/embed/5f7426107d9c0806f2605fe1"></iframe>

<h3 id="手动输入"><a href="#手动输入" class="headerlink" title="手动输入"></a>手动输入</h3><p>在R语言中可以通过调出数据编辑器手动输入数据。步骤如下：</p>
<ol>
<li>创建一个空矩阵或数据框</li>
<li>针对上面创建的数据结构调用数据编辑器。输入数据保存</li>
</ol>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">myedit &lt;- data.frame(age=numeric(<span class="number">0</span>),name=character(<span class="number">0</span>))</span><br><span class="line">myedit &lt;- edit(myedit)</span><br><span class="line"></span><br><span class="line">----- 通过上面的edit可以调出一个类似于excel的数据编辑框对数据进行编辑。</span><br></pre></td></tr></table></figure>

<p>上面通过numeric(0)可以创建一个只是指定数据模式但是不包含数据的向量。</p>
<h3 id="分隔符文本导入"><a href="#分隔符文本导入" class="headerlink" title="分隔符文本导入"></a>分隔符文本导入</h3><p>R语言中可以直接从以分隔符分隔的文本文件中导入数据，通过read.table()函数可以读入一个表格格式的文件，并且存储在一个数据框中。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mycsv &lt;- read.table(file,options(header,sep,row.names,col.names,skip,stringASFactors,colClasses,,,,))</span><br><span class="line"></span><br><span class="line">file :这是一个以分隔符分隔的ASCII文本文件。</span><br><span class="line">options :是函数的可选参数集合，包括很多参数</span><br><span class="line">	header :文件是否在第一行包含了变量名。</span><br><span class="line">	sep :说明文件是以什么符号分隔数据的，默认的sep=<span class="string">&quot; &quot;</span>是以空格，制表符，换行，回车等分隔的。可以使用sep=<span class="string">&quot;,&quot;</span>来指定逗号为分隔符。</span><br><span class="line">	row.names : 用来指定行名</span><br><span class="line">	col.names :用于指定列名</span><br><span class="line">	skip :这个参数可以指定是否跳过文件中的前几行数据。</span><br><span class="line">	stringASFactors :read.table()函数默认将字符串读取为因子，可以通过设置该参数为<span class="literal">FALSE</span>将这一行为取消。</span><br><span class="line">	colClasses :可以通过这个参数去指定每一列的数据类型。</span><br><span class="line">	，，，，，</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">创建一个txt文件，内容为：</span><br><span class="line"></span><br><span class="line">张三 李四 王五 赵六</span><br><span class="line">男 男 男 男</span><br><span class="line">23 <span class="number">24</span> <span class="number">34</span> <span class="number">44</span></span><br><span class="line"></span><br><span class="line">存放在C:\\Users\\SweepingRobot\\Desktop。</span><br><span class="line"></span><br><span class="line">mydata &lt;- read.table(<span class="string">&quot;C:/Users/SweepingRobot/Desktop/data.txt&quot;</span>,header=<span class="literal">TRUE</span>)</span><br><span class="line"></span><br><span class="line">----- 上面通过read.table()函数读取位于桌面上的以空格分隔的txt文件，开头包含变量名。</span><br></pre></td></tr></table></figure>

<p>在R语言中路径不能使用反斜杠分隔，因为在R语言中反斜杠是转义的符号，所有要用斜杆。</p>
]]></content>
      <categories>
        <category>R语言</category>
        <category>基础</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据操作</tag>
      </tags>
  </entry>
  <entry>
    <title>理想中的学者</title>
    <url>//posts/2/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>今天的内卷是一个陀螺式的死循环</p>
<p><strong>项飙</strong></p>

</blockquote>

<blockquote>
<p>今天的内卷是一个陀螺式的死循环，我们要不断的要抽打自己，让自己就这么空转，每天要不断地自己动员自己是吧？所以它是一个高度动态的陷阱，所以非常耗能的。[1]</p>
</blockquote>
<a id="more"></a>

<p>这些天一直在听项飙的一些音频，有关于移民、世界国民以及内卷化的一些内容，从这些音频中进一步加深了对项飙的印象。对于项飙这个名字很多人都非常的陌生，因为作为一个人类学家，项飙从研究生开始就去了牛津，后来也一直在国外任教，以前几乎很少在国内的社交媒体中亮相。</p>
<p>对于我来说，第一次知道项飙也是今年早些时候的事，由于疫情的原因待在家里，通过看许知远的<strong>《十三邀》</strong>认识到了项飙这个人，看完那期节目后我对于项飙印象非常的深刻，之所以这样就我个人来说认为是有很多的原因的：</p>
<p>首先是他的外观：在节目中，他是一个个子不高皮肤较黑身体非常的瘦的人，打扮的也非常的朴素，一眼看起来非常就是非常的平易近人的样子，丝毫没有架子气。这一切感觉似乎都与他身上的头衔有一丝不符，之所以有这种感觉我想是因为平常所看到的一些所谓的学者似乎很多都是 “ 油光满面 ” ，西装革履，似乎看起来就没那么亲近了。</p>
<img data-src="http://ww1.sinaimg.cn/large/007DtFxUly1gkakmilwh4j30u00gw3z3.jpg" title="◎ 项飙" width="80%" height="50%" />



<p>其实让我最印象深刻的并不是他的外在的一面，而是作为一个学者内在的一面。在听他与许知远的对话的过程中有一种特别的舒服的感觉，在为一个人类学家，他在讨论有关于 “ 附近 ” 等社会学问题的时候并没有用那些多么高深的专业语句，而是非常的清晰的简洁的向听众讲述了他对专业问题的见解，更重要的是他展示了自己的整个的思考的过程，我认为这是最让我难忘的一点。</p>
]]></content>
      <categories>
        <category>闲言碎语</category>
      </categories>
      <tags>
        <tag>项飙</tag>
        <tag>人类学</tag>
      </tags>
  </entry>
</search>
